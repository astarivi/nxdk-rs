/* automatically generated by rust-bindgen 0.69.5 */

pub const __STDC_WANT_LIB_EXT1_PREVIOUS__: i32 = -1;
pub const _PDCLIB_endl: &[u8; 2] = b"\n\0";
pub const _PDCLIB_SUCCESS: u32 = 0;
pub const _PDCLIB_FAILURE: i32 = -1;
pub const _PDCLIB_CHAR_SIGNED: u32 = 1;
pub const _PDCLIB_SHRT_BYTES: u32 = 2;
pub const _PDCLIB_INT_BYTES: u32 = 4;
pub const _PDCLIB_LONG_BYTES: u32 = 4;
pub const _PDCLIB_LLONG_BYTES: u32 = 8;
pub const _PDCLIB_CLOCKS_PER_SEC: u32 = 1000;
pub const _PDCLIB_TIME_UTC: u32 = 1;
pub const _PDCLIB_FLT_ROUNDS: i32 = -1;
pub const _PDCLIB_FLT_EVAL_METHOD: i32 = -1;
pub const _PDCLIB_DECIMAL_DIG: u32 = 17;
pub const _PDCLIB_PAGESIZE: u32 = 4096;
pub const _PDCLIB_MINALLOC: u32 = 8;
pub const _PDCLIB_BUFSIZ: u32 = 1024;
pub const _PDCLIB_FOPEN_MAX: u32 = 8;
pub const _PDCLIB_FILENAME_MAX: u32 = 128;
pub const _PDCLIB_L_tmpnam: u32 = 46;
pub const _PDCLIB_TMP_MAX: u32 = 50;
pub const _PDCLIB_SEEK_SET: u32 = 0;
pub const _PDCLIB_SEEK_CUR: u32 = 1;
pub const _PDCLIB_SEEK_END: u32 = 2;
pub const _PDCLIB_UNGETCBUFSIZE: u32 = 1;
pub const _PDCLIB_ATEXIT_SLOTS: u32 = 40;
pub const _PDCLIB_E2BIG: u32 = 7;
pub const _PDCLIB_EACCES: u32 = 13;
pub const _PDCLIB_EADDRINUSE: u32 = 100;
pub const _PDCLIB_EADDRNOTAVAIL: u32 = 101;
pub const _PDCLIB_EAFNOSUPPORT: u32 = 102;
pub const _PDCLIB_EAGAIN: u32 = 11;
pub const _PDCLIB_EALREADY: u32 = 103;
pub const _PDCLIB_EBADF: u32 = 9;
pub const _PDCLIB_EBADMSG: u32 = 104;
pub const _PDCLIB_EBUSY: u32 = 16;
pub const _PDCLIB_ECANCELED: u32 = 105;
pub const _PDCLIB_ECHILD: u32 = 10;
pub const _PDCLIB_ECONNABORTED: u32 = 106;
pub const _PDCLIB_ECONNREFUSED: u32 = 107;
pub const _PDCLIB_ECONNRESET: u32 = 108;
pub const _PDCLIB_EDEADLK: u32 = 36;
pub const _PDCLIB_EDESTADDRREQ: u32 = 109;
pub const _PDCLIB_EDOM: u32 = 33;
pub const _PDCLIB_EEXIST: u32 = 17;
pub const _PDCLIB_EFAULT: u32 = 14;
pub const _PDCLIB_EFBIG: u32 = 27;
pub const _PDCLIB_EHOSTUNREACH: u32 = 110;
pub const _PDCLIB_EIDRM: u32 = 111;
pub const _PDCLIB_EILSEQ: u32 = 42;
pub const _PDCLIB_EINPROGRESS: u32 = 112;
pub const _PDCLIB_EINTR: u32 = 4;
pub const _PDCLIB_EINVAL: u32 = 22;
pub const _PDCLIB_EIO: u32 = 5;
pub const _PDCLIB_EISCONN: u32 = 113;
pub const _PDCLIB_EISDIR: u32 = 21;
pub const _PDCLIB_ELOOP: u32 = 114;
pub const _PDCLIB_EMFILE: u32 = 24;
pub const _PDCLIB_EMLINK: u32 = 31;
pub const _PDCLIB_EMSGSIZE: u32 = 115;
pub const _PDCLIB_ENAMETOOLONG: u32 = 38;
pub const _PDCLIB_ENETDOWN: u32 = 116;
pub const _PDCLIB_ENETRESET: u32 = 117;
pub const _PDCLIB_ENETUNREACH: u32 = 118;
pub const _PDCLIB_ENFILE: u32 = 23;
pub const _PDCLIB_ENOBUFS: u32 = 119;
pub const _PDCLIB_ENODATA: u32 = 120;
pub const _PDCLIB_ENODEV: u32 = 19;
pub const _PDCLIB_ENOENT: u32 = 2;
pub const _PDCLIB_ENOEXEC: u32 = 8;
pub const _PDCLIB_ENOLCK: u32 = 39;
pub const _PDCLIB_ENOLINK: u32 = 121;
pub const _PDCLIB_ENOMEM: u32 = 12;
pub const _PDCLIB_ENOMSG: u32 = 122;
pub const _PDCLIB_ENOPROTOOPT: u32 = 123;
pub const _PDCLIB_ENOSPC: u32 = 28;
pub const _PDCLIB_ENOSR: u32 = 124;
pub const _PDCLIB_ENOSTR: u32 = 125;
pub const _PDCLIB_ENOSYS: u32 = 40;
pub const _PDCLIB_ENOTCONN: u32 = 126;
pub const _PDCLIB_ENOTDIR: u32 = 20;
pub const _PDCLIB_ENOTEMPTY: u32 = 41;
pub const _PDCLIB_ENOTRECOVERABLE: u32 = 127;
pub const _PDCLIB_ENOTSOCK: u32 = 128;
pub const _PDCLIB_ENOTSUP: u32 = 129;
pub const _PDCLIB_ENOTTY: u32 = 25;
pub const _PDCLIB_ENXIO: u32 = 6;
pub const _PDCLIB_EOPNOTSUPP: u32 = 130;
pub const _PDCLIB_EOVERFLOW: u32 = 132;
pub const _PDCLIB_EOWNERDEAD: u32 = 133;
pub const _PDCLIB_EPERM: u32 = 1;
pub const _PDCLIB_EPIPE: u32 = 32;
pub const _PDCLIB_EPROTO: u32 = 134;
pub const _PDCLIB_EPROTONOSUPPORT: u32 = 135;
pub const _PDCLIB_EPROTOTYPE: u32 = 136;
pub const _PDCLIB_ERANGE: u32 = 34;
pub const _PDCLIB_EROFS: u32 = 30;
pub const _PDCLIB_ESPIPE: u32 = 29;
pub const _PDCLIB_ESRCH: u32 = 3;
pub const _PDCLIB_ETIME: u32 = 137;
pub const _PDCLIB_ETIMEDOUT: u32 = 138;
pub const _PDCLIB_ETXTBSY: u32 = 139;
pub const _PDCLIB_EWOULDBLOCK: u32 = 140;
pub const _PDCLIB_EXDEV: u32 = 18;
pub const _PDCLIB_ERRNO_MAX: u32 = 141;
pub const _PDCLIB_LOCALE_PATH: &[u8; 23] = b"/usr/share/pdclib/i18n\0";
pub const _PDCLIB_ONCE_FLAG_INIT: u32 = 0;
pub const _PDCLIB_TSS_DTOR_ITERATIONS: u32 = 4;
pub const _PDCLIB_HOSTED: u32 = 1;
pub const _PDCLIB_NULL: u32 = 0;
pub const _PDCLIB_CHAR_BIT: u32 = 8;
pub const _PDCLIB_UCHAR_MIN: u32 = 0;
pub const _PDCLIB_UCHAR_MAX: u32 = 255;
pub const _PDCLIB_SCHAR_MIN: i32 = -128;
pub const _PDCLIB_SCHAR_MAX: u32 = 127;
pub const _PDCLIB_CHAR_MIN: i32 = -128;
pub const _PDCLIB_CHAR_MAX: u32 = 127;
pub const _PDCLIB_SHRT_MAX: u32 = 32767;
pub const _PDCLIB_SHRT_MIN: i32 = -32768;
pub const _PDCLIB_USHRT_MAX: u32 = 65535;
pub const _PDCLIB_USHRT_MIN: u32 = 0;
pub const _PDCLIB_INT_MAX: u32 = 2147483647;
pub const _PDCLIB_INT_MIN: i32 = -2147483648;
pub const _PDCLIB_UINT_MAX: u32 = 4294967295;
pub const _PDCLIB_UINT_MIN: u32 = 0;
pub const _PDCLIB_LONG_MAX: u32 = 2147483647;
pub const _PDCLIB_LONG_MIN: i32 = -2147483648;
pub const _PDCLIB_ULONG_MAX: u32 = 4294967295;
pub const _PDCLIB_ULONG_MIN: u32 = 0;
pub const _PDCLIB_LLONG_MAX: u64 = 9223372036854775807;
pub const _PDCLIB_LLONG_MIN: i64 = -9223372036854775808;
pub const _PDCLIB_ULLONG_MAX: i32 = -1;
pub const _PDCLIB_ULLONG_MIN: u32 = 0;
pub const _PDCLIB_INT8_MAX: u32 = 127;
pub const _PDCLIB_INT8_MIN: i32 = -128;
pub const _PDCLIB_UINT8_MAX: u32 = 255;
pub const _PDCLIB_INT16_MAX: u32 = 32767;
pub const _PDCLIB_INT16_MIN: i32 = -32768;
pub const _PDCLIB_UINT16_MAX: u32 = 65535;
pub const _PDCLIB_INT32_MAX: u32 = 2147483647;
pub const _PDCLIB_INT32_MIN: i32 = -2147483648;
pub const _PDCLIB_UINT32_MAX: u32 = 4294967295;
pub const _PDCLIB_INT64_MAX: u64 = 9223372036854775807;
pub const _PDCLIB_INT64_MIN: i64 = -9223372036854775808;
pub const _PDCLIB_UINT64_MAX: i32 = -1;
pub const _PDCLIB_FREAD: u32 = 8;
pub const _PDCLIB_FWRITE: u32 = 16;
pub const _PDCLIB_FAPPEND: u32 = 32;
pub const _PDCLIB_FRW: u32 = 64;
pub const _PDCLIB_FBIN: u32 = 128;
pub const _PDCLIB_FREEBUFFER: u32 = 256;
pub const _PDCLIB_ERRORFLAG: u32 = 512;
pub const _PDCLIB_EOFFLAG: u32 = 1024;
pub const _PDCLIB_WIDESTREAM: u32 = 2048;
pub const _PDCLIB_BYTESTREAM: u32 = 4096;
pub const _PDCLIB_DELONCLOSE: u32 = 8192;
pub const _PDCLIB_STATIC: u32 = 16384;
pub const _PDCLIB_FREENAME: u32 = 32768;
pub const _PDCLIB_LC_ALL: u32 = 0;
pub const _PDCLIB_LC_COLLATE: u32 = 1;
pub const _PDCLIB_LC_CTYPE: u32 = 2;
pub const _PDCLIB_LC_MONETARY: u32 = 3;
pub const _PDCLIB_LC_NUMERIC: u32 = 4;
pub const _PDCLIB_LC_TIME: u32 = 5;
pub const _PDCLIB_LC_MESSAGES: u32 = 6;
pub const _PDCLIB_LC_COUNT: u32 = 7;
pub const _PDCLIB_CTYPE_ALPHA: u32 = 1;
pub const _PDCLIB_CTYPE_BLANK: u32 = 2;
pub const _PDCLIB_CTYPE_CNTRL: u32 = 4;
pub const _PDCLIB_CTYPE_GRAPH: u32 = 8;
pub const _PDCLIB_CTYPE_PUNCT: u32 = 16;
pub const _PDCLIB_CTYPE_SPACE: u32 = 32;
pub const _PDCLIB_CTYPE_LOWER: u32 = 64;
pub const _PDCLIB_CTYPE_UPPER: u32 = 128;
pub const _PDCLIB_CHARSET_SIZE: u32 = 256;
pub const NULL: u32 = 0;
pub const RAND_MAX: u32 = 32767;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: i32 = -1;
pub const _sys_nerr: u32 = 141;
pub const INT8_MIN: i32 = -128;
pub const INT8_MAX: u32 = 127;
pub const UINT8_MAX: u32 = 255;
pub const INT16_MIN: i32 = -32768;
pub const INT16_MAX: u32 = 32767;
pub const UINT16_MAX: u32 = 65535;
pub const INT32_MIN: i32 = -2147483648;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST8_MAX: u32 = 127;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const MB_CUR_MAX: u32 = 2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_div_t {
    pub quot: libc::c_int,
    pub rem: libc::c_int,
}
#[test]
fn bindgen_test_layout__PDCLIB_div_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_div_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_PDCLIB_div_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_PDCLIB_div_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_ldiv_t {
    pub quot: libc::c_long,
    pub rem: libc::c_long,
}
#[test]
fn bindgen_test_layout__PDCLIB_ldiv_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_ldiv_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_PDCLIB_ldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_PDCLIB_ldiv_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lldiv_t {
    pub quot: libc::c_longlong,
    pub rem: libc::c_longlong,
}
#[test]
fn bindgen_test_layout__PDCLIB_lldiv_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_lldiv_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_PDCLIB_lldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_PDCLIB_lldiv_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_imaxdiv_t {
    pub quot: libc::c_longlong,
    pub rem: libc::c_longlong,
}
#[test]
fn bindgen_test_layout__PDCLIB_imaxdiv_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_imaxdiv_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_PDCLIB_imaxdiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_PDCLIB_imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type _PDCLIB_va_list = __builtin_va_list;
pub type _PDCLIB_fd_t = *mut libc::c_void;
pub type _PDCLIB_thrd_t = *mut libc::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __PDCLIB_cnd_t {
    pub eventHandles: [*mut libc::c_void; 2usize],
    pub waitCount: u32,
}
#[test]
fn bindgen_test_layout___PDCLIB_cnd_t() {
    const UNINIT: ::core::mem::MaybeUninit<__PDCLIB_cnd_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__PDCLIB_cnd_t>(),
        12usize,
        concat!("Size of: ", stringify!(__PDCLIB_cnd_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__PDCLIB_cnd_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__PDCLIB_cnd_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).eventHandles) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__PDCLIB_cnd_t),
            "::",
            stringify!(eventHandles)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).waitCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__PDCLIB_cnd_t),
            "::",
            stringify!(waitCount)
        )
    );
}
pub type _PDCLIB_cnd_t = __PDCLIB_cnd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __PDCLIB_mtx_t {
    pub handle: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout___PDCLIB_mtx_t() {
    const UNINIT: ::core::mem::MaybeUninit<__PDCLIB_mtx_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__PDCLIB_mtx_t>(),
        4usize,
        concat!("Size of: ", stringify!(__PDCLIB_mtx_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__PDCLIB_mtx_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__PDCLIB_mtx_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__PDCLIB_mtx_t),
            "::",
            stringify!(handle)
        )
    );
}
pub type _PDCLIB_mtx_t = __PDCLIB_mtx_t;
pub type _PDCLIB_tss_t = libc::c_uint;
pub type _PDCLIB_once_flag = libc::c_int;
pub type _PDCLIB_int8_t = libc::c_schar;
pub type _PDCLIB_uint8_t = libc::c_uchar;
pub type _PDCLIB_int16_t = libc::c_short;
pub type _PDCLIB_uint16_t = libc::c_ushort;
pub type _PDCLIB_int32_t = libc::c_int;
pub type _PDCLIB_uint32_t = libc::c_uint;
pub type _PDCLIB_int64_t = libc::c_longlong;
pub type _PDCLIB_uint64_t = libc::c_ulonglong;
pub type _PDCLIB_int_fast8_t = libc::c_int;
pub type _PDCLIB_uint_fast8_t = libc::c_uint;
pub type _PDCLIB_int_fast16_t = libc::c_int;
pub type _PDCLIB_uint_fast16_t = libc::c_uint;
pub type _PDCLIB_int_fast32_t = libc::c_int;
pub type _PDCLIB_uint_fast32_t = libc::c_uint;
pub type _PDCLIB_int_fast64_t = libc::c_long;
pub type _PDCLIB_uint_fast64_t = libc::c_ulong;
pub type _PDCLIB_ptrdiff_t = libc::c_int;
pub type _PDCLIB_size_t = libc::c_uint;
pub type _PDCLIB_wchar_t = libc::c_ushort;
pub type _PDCLIB_wint_t = libc::c_ushort;
pub type _PDCLIB_intptr_t = libc::c_long;
pub type _PDCLIB_uintptr_t = libc::c_ulong;
pub type _PDCLIB_intmax_t = libc::c_longlong;
pub type _PDCLIB_uintmax_t = libc::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_fpos_t {
    pub offset: _PDCLIB_uint64_t,
    pub status: libc::c_int,
}
#[test]
fn bindgen_test_layout__PDCLIB_fpos_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_fpos_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_PDCLIB_fpos_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_PDCLIB_fpos_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_fpos_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_fpos_t),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_file_t {
    pub handle: _PDCLIB_fd_t,
    pub buffer: *mut libc::c_char,
    pub bufsize: _PDCLIB_size_t,
    pub bufidx: _PDCLIB_size_t,
    pub bufend: _PDCLIB_size_t,
    pub pos: _PDCLIB_fpos_t,
    pub ungetidx: _PDCLIB_size_t,
    pub ungetbuf: *mut libc::c_uchar,
    pub status: libc::c_uint,
    pub filename: *mut libc::c_char,
    pub next: *mut _PDCLIB_file_t,
}
#[test]
fn bindgen_test_layout__PDCLIB_file_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_file_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_file_t>(),
        64usize,
        concat!("Size of: ", stringify!(_PDCLIB_file_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_file_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_PDCLIB_file_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_file_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_file_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bufsize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_file_t),
            "::",
            stringify!(bufsize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bufidx) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_file_t),
            "::",
            stringify!(bufidx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bufend) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_file_t),
            "::",
            stringify!(bufend)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_file_t),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ungetidx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_file_t),
            "::",
            stringify!(ungetidx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ungetbuf) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_file_t),
            "::",
            stringify!(ungetbuf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_file_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_file_t),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_file_t),
            "::",
            stringify!(next)
        )
    );
}
pub type _PDCLIB_time_t = libc::c_long;
pub type _PDCLIB_clock_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_exitfunc_t {
    pub next: *mut _PDCLIB_exitfunc_t,
    pub func: ::core::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout__PDCLIB_exitfunc_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_exitfunc_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_exitfunc_t>(),
        8usize,
        concat!("Size of: ", stringify!(_PDCLIB_exitfunc_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_exitfunc_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_PDCLIB_exitfunc_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_exitfunc_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_exitfunc_t),
            "::",
            stringify!(func)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_status_t {
    pub base: libc::c_int,
    pub flags: _PDCLIB_int_fast32_t,
    pub n: _PDCLIB_size_t,
    pub i: _PDCLIB_size_t,
    pub current: _PDCLIB_size_t,
    pub s: *mut libc::c_char,
    pub width: _PDCLIB_size_t,
    pub prec: libc::c_int,
    pub stream: *mut _PDCLIB_file_t,
    pub arg: _PDCLIB_va_list,
}
#[test]
fn bindgen_test_layout__PDCLIB_status_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_status_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_status_t>(),
        40usize,
        concat!("Size of: ", stringify!(_PDCLIB_status_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_status_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_PDCLIB_status_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_status_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_status_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_status_t),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_status_t),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_status_t),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_status_t),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_status_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prec) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_status_t),
            "::",
            stringify!(prec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_status_t),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_status_t),
            "::",
            stringify!(arg)
        )
    );
}
extern "C" {
    pub fn _PDCLIB_atomax(s: *const libc::c_char) -> _PDCLIB_intmax_t;
}
extern "C" {
    pub fn _PDCLIB_strtox_prelim(
        p: *const libc::c_char,
        sign: *mut libc::c_char,
        base: *mut libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn _PDCLIB_strtox_main(
        p: *mut *const libc::c_char,
        base: libc::c_uint,
        error: _PDCLIB_uintmax_t,
        limval: _PDCLIB_uintmax_t,
        limdigit: libc::c_int,
        sign: *mut libc::c_char,
    ) -> _PDCLIB_uintmax_t;
}
extern "C" {
    pub static _PDCLIB_digits: [libc::c_char; 0usize];
}
extern "C" {
    pub static _PDCLIB_Xdigits: [libc::c_char; 0usize];
}
extern "C" {
    pub fn _PDCLIB_print(
        spec: *const libc::c_char,
        status: *mut _PDCLIB_status_t,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn _PDCLIB_scan(
        spec: *const libc::c_char,
        status: *mut _PDCLIB_status_t,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn _PDCLIB_filemode(mode: *const libc::c_char) -> libc::c_uint;
}
extern "C" {
    pub fn _PDCLIB_prepread(stream: *mut _PDCLIB_file_t) -> libc::c_int;
}
extern "C" {
    pub fn _PDCLIB_prepwrite(stream: *mut _PDCLIB_file_t) -> libc::c_int;
}
extern "C" {
    pub fn _PDCLIB_closeall();
}
extern "C" {
    pub fn _PDCLIB_is_leap(year_offset: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn _PDCLIB_load_lines(
        stream: *mut _PDCLIB_file_t,
        lines: _PDCLIB_size_t,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn _PDCLIB_getstream(stream: *mut _PDCLIB_file_t) -> libc::c_int;
}
extern "C" {
    pub fn _PDCLIB_setstream(stream: *mut _PDCLIB_file_t);
}
extern "C" {
    pub fn _PDCLIB_strtok(
        s1: *mut libc::c_char,
        s1max: *mut _PDCLIB_size_t,
        s2: *const libc::c_char,
        ptr: *mut *mut libc::c_char,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn _PDCLIB_errno_func() -> *mut libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_lconv_numeric_t {
    pub decimal_point: *mut libc::c_char,
    pub thousands_sep: *mut libc::c_char,
    pub grouping: *mut libc::c_char,
}
#[test]
fn bindgen_test_layout__PDCLIB_lc_lconv_numeric_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_lc_lconv_numeric_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_lc_lconv_numeric_t>(),
        12usize,
        concat!("Size of: ", stringify!(_PDCLIB_lc_lconv_numeric_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_lc_lconv_numeric_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_PDCLIB_lc_lconv_numeric_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).decimal_point) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_numeric_t),
            "::",
            stringify!(decimal_point)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thousands_sep) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_numeric_t),
            "::",
            stringify!(thousands_sep)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).grouping) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_numeric_t),
            "::",
            stringify!(grouping)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_lconv_monetary_t {
    pub mon_decimal_point: *mut libc::c_char,
    pub mon_thousands_sep: *mut libc::c_char,
    pub mon_grouping: *mut libc::c_char,
    pub positive_sign: *mut libc::c_char,
    pub negative_sign: *mut libc::c_char,
    pub currency_symbol: *mut libc::c_char,
    pub int_curr_symbol: *mut libc::c_char,
    pub frac_digits: libc::c_char,
    pub p_cs_precedes: libc::c_char,
    pub n_cs_precedes: libc::c_char,
    pub p_sep_by_space: libc::c_char,
    pub n_sep_by_space: libc::c_char,
    pub p_sign_posn: libc::c_char,
    pub n_sign_posn: libc::c_char,
    pub int_frac_digits: libc::c_char,
    pub int_p_cs_precedes: libc::c_char,
    pub int_n_cs_precedes: libc::c_char,
    pub int_p_sep_by_space: libc::c_char,
    pub int_n_sep_by_space: libc::c_char,
    pub int_p_sign_posn: libc::c_char,
    pub int_n_sign_posn: libc::c_char,
}
#[test]
fn bindgen_test_layout__PDCLIB_lc_lconv_monetary_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_lc_lconv_monetary_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_lc_lconv_monetary_t>(),
        44usize,
        concat!("Size of: ", stringify!(_PDCLIB_lc_lconv_monetary_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_lc_lconv_monetary_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_PDCLIB_lc_lconv_monetary_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mon_decimal_point) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(mon_decimal_point)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mon_thousands_sep) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(mon_thousands_sep)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mon_grouping) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(mon_grouping)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).positive_sign) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(positive_sign)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).negative_sign) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(negative_sign)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).currency_symbol) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(currency_symbol)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).int_curr_symbol) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(int_curr_symbol)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).frac_digits) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(frac_digits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).p_cs_precedes) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).n_cs_precedes) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).p_sep_by_space) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).n_sep_by_space) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).p_sign_posn) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).n_sign_posn) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(n_sign_posn)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).int_frac_digits) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(int_frac_digits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).int_p_cs_precedes) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(int_p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).int_n_cs_precedes) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(int_n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).int_p_sep_by_space) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(int_p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).int_n_sep_by_space) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(int_n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).int_p_sign_posn) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(int_p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).int_n_sign_posn) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_lconv_monetary_t),
            "::",
            stringify!(int_n_sign_posn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_numeric_monetary_t {
    pub lconv: *mut lconv,
    pub numeric_alloced: libc::c_int,
    pub monetary_alloced: libc::c_int,
}
#[test]
fn bindgen_test_layout__PDCLIB_lc_numeric_monetary_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_lc_numeric_monetary_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_lc_numeric_monetary_t>(),
        12usize,
        concat!("Size of: ", stringify!(_PDCLIB_lc_numeric_monetary_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_lc_numeric_monetary_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_PDCLIB_lc_numeric_monetary_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lconv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_numeric_monetary_t),
            "::",
            stringify!(lconv)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).numeric_alloced) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_numeric_monetary_t),
            "::",
            stringify!(numeric_alloced)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).monetary_alloced) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_numeric_monetary_t),
            "::",
            stringify!(monetary_alloced)
        )
    );
}
extern "C" {
    pub static mut _PDCLIB_lc_numeric_monetary: _PDCLIB_lc_numeric_monetary_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_collate_t {
    pub alloced: libc::c_int,
}
#[test]
fn bindgen_test_layout__PDCLIB_lc_collate_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_lc_collate_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_lc_collate_t>(),
        4usize,
        concat!("Size of: ", stringify!(_PDCLIB_lc_collate_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_lc_collate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_PDCLIB_lc_collate_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).alloced) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_collate_t),
            "::",
            stringify!(alloced)
        )
    );
}
extern "C" {
    pub static mut _PDCLIB_lc_collate: _PDCLIB_lc_collate_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_ctype_entry_t {
    pub flags: _PDCLIB_uint16_t,
    pub upper: libc::c_uchar,
    pub lower: libc::c_uchar,
}
#[test]
fn bindgen_test_layout__PDCLIB_lc_ctype_entry_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_lc_ctype_entry_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_lc_ctype_entry_t>(),
        4usize,
        concat!("Size of: ", stringify!(_PDCLIB_lc_ctype_entry_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_lc_ctype_entry_t>(),
        2usize,
        concat!("Alignment of ", stringify!(_PDCLIB_lc_ctype_entry_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_ctype_entry_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).upper) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_ctype_entry_t),
            "::",
            stringify!(upper)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lower) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_ctype_entry_t),
            "::",
            stringify!(lower)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_ctype_t {
    pub alloced: libc::c_int,
    pub digits_low: libc::c_int,
    pub digits_high: libc::c_int,
    pub Xdigits_low: libc::c_int,
    pub Xdigits_high: libc::c_int,
    pub xdigits_low: libc::c_int,
    pub xdigits_high: libc::c_int,
    pub entry: *mut _PDCLIB_lc_ctype_entry_t,
}
#[test]
fn bindgen_test_layout__PDCLIB_lc_ctype_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_lc_ctype_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_lc_ctype_t>(),
        32usize,
        concat!("Size of: ", stringify!(_PDCLIB_lc_ctype_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_lc_ctype_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_PDCLIB_lc_ctype_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).alloced) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_ctype_t),
            "::",
            stringify!(alloced)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).digits_low) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_ctype_t),
            "::",
            stringify!(digits_low)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).digits_high) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_ctype_t),
            "::",
            stringify!(digits_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Xdigits_low) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_ctype_t),
            "::",
            stringify!(Xdigits_low)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Xdigits_high) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_ctype_t),
            "::",
            stringify!(Xdigits_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xdigits_low) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_ctype_t),
            "::",
            stringify!(xdigits_low)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xdigits_high) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_ctype_t),
            "::",
            stringify!(xdigits_high)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).entry) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_ctype_t),
            "::",
            stringify!(entry)
        )
    );
}
extern "C" {
    pub static mut _PDCLIB_lc_ctype: _PDCLIB_lc_ctype_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_messages_t {
    pub alloced: libc::c_int,
    pub errno_texts: [*mut libc::c_char; 141usize],
}
#[test]
fn bindgen_test_layout__PDCLIB_lc_messages_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_lc_messages_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_lc_messages_t>(),
        568usize,
        concat!("Size of: ", stringify!(_PDCLIB_lc_messages_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_lc_messages_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_PDCLIB_lc_messages_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).alloced) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_messages_t),
            "::",
            stringify!(alloced)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).errno_texts) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_messages_t),
            "::",
            stringify!(errno_texts)
        )
    );
}
extern "C" {
    pub static mut _PDCLIB_lc_messages: _PDCLIB_lc_messages_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_time_t {
    pub alloced: libc::c_int,
    pub month_name_abbr: [*mut libc::c_char; 12usize],
    pub month_name_full: [*mut libc::c_char; 12usize],
    pub day_name_abbr: [*mut libc::c_char; 7usize],
    pub day_name_full: [*mut libc::c_char; 7usize],
    pub date_time_format: *mut libc::c_char,
    pub time_format_12h: *mut libc::c_char,
    pub date_format: *mut libc::c_char,
    pub time_format: *mut libc::c_char,
    pub am_pm: [*mut libc::c_char; 2usize],
}
#[test]
fn bindgen_test_layout__PDCLIB_lc_time_t() {
    const UNINIT: ::core::mem::MaybeUninit<_PDCLIB_lc_time_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<_PDCLIB_lc_time_t>(),
        180usize,
        concat!("Size of: ", stringify!(_PDCLIB_lc_time_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_PDCLIB_lc_time_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_PDCLIB_lc_time_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).alloced) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_time_t),
            "::",
            stringify!(alloced)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).month_name_abbr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_time_t),
            "::",
            stringify!(month_name_abbr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).month_name_full) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_time_t),
            "::",
            stringify!(month_name_full)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).day_name_abbr) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_time_t),
            "::",
            stringify!(day_name_abbr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).day_name_full) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_time_t),
            "::",
            stringify!(day_name_full)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).date_time_format) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_time_t),
            "::",
            stringify!(date_time_format)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).time_format_12h) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_time_t),
            "::",
            stringify!(time_format_12h)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).date_format) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_time_t),
            "::",
            stringify!(date_format)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).time_format) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_time_t),
            "::",
            stringify!(time_format)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).am_pm) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_PDCLIB_lc_time_t),
            "::",
            stringify!(am_pm)
        )
    );
}
extern "C" {
    pub static mut _PDCLIB_lc_time: _PDCLIB_lc_time_t;
}
extern "C" {
    pub fn _PDCLIB_load_lc_numeric(
        path: *const libc::c_char,
        locale: *const libc::c_char,
    ) -> *mut _PDCLIB_lc_lconv_numeric_t;
}
extern "C" {
    pub fn _PDCLIB_load_lc_monetary(
        path: *const libc::c_char,
        locale: *const libc::c_char,
    ) -> *mut _PDCLIB_lc_lconv_monetary_t;
}
extern "C" {
    pub fn _PDCLIB_load_lc_collate(
        path: *const libc::c_char,
        locale: *const libc::c_char,
    ) -> *mut _PDCLIB_lc_collate_t;
}
extern "C" {
    pub fn _PDCLIB_load_lc_ctype(
        path: *const libc::c_char,
        locale: *const libc::c_char,
    ) -> *mut _PDCLIB_lc_ctype_t;
}
extern "C" {
    pub fn _PDCLIB_load_lc_time(
        path: *const libc::c_char,
        locale: *const libc::c_char,
    ) -> *mut _PDCLIB_lc_time_t;
}
extern "C" {
    pub fn _PDCLIB_load_lc_messages(
        path: *const libc::c_char,
        locale: *const libc::c_char,
    ) -> *mut _PDCLIB_lc_messages_t;
}
pub const _PDCLIB_assert_568: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = libc::c_int;
pub const _PDCLIB_assert_569: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = libc::c_int;
pub const _PDCLIB_assert_570: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = libc::c_int;
pub const _PDCLIB_assert_571: _bindgen_ty_4 = 1;
pub type _bindgen_ty_4 = libc::c_int;
pub const _PDCLIB_assert_574: _bindgen_ty_5 = 1;
pub type _bindgen_ty_5 = libc::c_int;
pub const _PDCLIB_assert_577: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = libc::c_int;
pub const _PDCLIB_assert_580: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = libc::c_int;
pub const _PDCLIB_assert_586: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = libc::c_int;
pub const _PDCLIB_assert_589: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = libc::c_int;
extern "C" {
    pub fn atof(nptr: *const libc::c_char) -> f64;
}
extern "C" {
    pub fn strtod(nptr: *const libc::c_char, endptr: *mut *mut libc::c_char) -> f64;
}
extern "C" {
    pub fn strtof(nptr: *const libc::c_char, endptr: *mut *mut libc::c_char) -> f32;
}
extern "C" {
    pub fn strtold(nptr: *const libc::c_char, endptr: *mut *mut libc::c_char) -> f64;
}
extern "C" {
    pub fn strtol(
        nptr: *const libc::c_char,
        endptr: *mut *mut libc::c_char,
        base: libc::c_int,
    ) -> libc::c_long;
}
extern "C" {
    pub fn strtoll(
        nptr: *const libc::c_char,
        endptr: *mut *mut libc::c_char,
        base: libc::c_int,
    ) -> libc::c_longlong;
}
extern "C" {
    pub fn strtoul(
        nptr: *const libc::c_char,
        endptr: *mut *mut libc::c_char,
        base: libc::c_int,
    ) -> libc::c_ulong;
}
extern "C" {
    pub fn strtoull(
        nptr: *const libc::c_char,
        endptr: *mut *mut libc::c_char,
        base: libc::c_int,
    ) -> libc::c_ulonglong;
}
extern "C" {
    pub fn atoi(nptr: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn atol(nptr: *const libc::c_char) -> libc::c_long;
}
extern "C" {
    pub fn atoll(nptr: *const libc::c_char) -> libc::c_longlong;
}
extern "C" {
    pub static mut _PDCLIB_seed: libc::c_ulong;
}
extern "C" {
    pub fn rand() -> libc::c_int;
}
extern "C" {
    pub fn srand(seed: libc::c_uint);
}
extern "C" {
    pub fn malloc(size: libc::c_uint) -> *mut libc::c_void;
}
extern "C" {
    pub fn calloc(nmemb: libc::c_uint, size: libc::c_uint) -> *mut libc::c_void;
}
extern "C" {
    pub fn aligned_alloc(alignment: libc::c_uint, size: libc::c_uint) -> *mut libc::c_void;
}
extern "C" {
    pub fn free(ptr: *mut libc::c_void);
}
extern "C" {
    pub fn realloc(ptr: *mut libc::c_void, size: libc::c_uint) -> *mut libc::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn at_quick_exit(func: ::core::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
}
extern "C" {
    pub fn atexit(func: ::core::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
}
extern "C" {
    pub fn exit(status: libc::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(status: libc::c_int);
}
extern "C" {
    pub fn _Exit(status: libc::c_int) -> !;
}
extern "C" {
    pub fn getenv(name: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn system(string: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn bsearch(
        key: *const libc::c_void,
        base: *const libc::c_void,
        nmemb: usize,
        size: usize,
        compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const libc::c_void,
                arg2: *const libc::c_void,
            ) -> libc::c_int,
        >,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn qsort(
        base: *mut libc::c_void,
        nmemb: usize,
        size: usize,
        compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const libc::c_void,
                arg2: *const libc::c_void,
            ) -> libc::c_int,
        >,
    );
}
extern "C" {
    pub fn abs(j: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn labs(j: libc::c_long) -> libc::c_long;
}
extern "C" {
    pub fn llabs(j: libc::c_longlong) -> libc::c_longlong;
}
pub type div_t = _PDCLIB_div_t;
pub type ldiv_t = _PDCLIB_ldiv_t;
pub type lldiv_t = _PDCLIB_lldiv_t;
extern "C" {
    pub fn div(numer: libc::c_int, denom: libc::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(numer: libc::c_long, denom: libc::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(numer: libc::c_longlong, denom: libc::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn _byteswap_ushort(val: libc::c_ushort) -> libc::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(val: libc::c_ulong) -> libc::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(val: libc::c_ulonglong) -> libc::c_ulonglong;
}
pub type _purecall_handler = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_purecall_handler(function: _purecall_handler) -> _purecall_handler;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = _PDCLIB_int_fast8_t;
pub type int_fast16_t = _PDCLIB_int_fast16_t;
pub type int_fast32_t = _PDCLIB_int_fast32_t;
pub type int_fast64_t = _PDCLIB_int_fast64_t;
pub type uint_fast8_t = _PDCLIB_uint_fast8_t;
pub type uint_fast16_t = _PDCLIB_uint_fast16_t;
pub type uint_fast32_t = _PDCLIB_uint_fast32_t;
pub type uint_fast64_t = _PDCLIB_uint_fast64_t;
pub type intmax_t = _PDCLIB_intmax_t;
pub type uintmax_t = _PDCLIB_uintmax_t;
pub type wchar_t = _PDCLIB_wchar_t;
pub type wint_t = _PDCLIB_wint_t;
pub type wctrans_t = libc::c_int;
pub type wctype_t = libc::c_int;
extern "C" {
    pub fn iswalnum(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswalpha(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswblank(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswcntrl(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswdigit(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswgraph(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswlower(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswprint(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswpunct(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswspace(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswupper(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswxdigit(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswctype(wc: wint_t, desc: wctype_t) -> libc::c_int;
}
extern "C" {
    pub fn wctype(property: *const libc::c_char) -> wctype_t;
}
extern "C" {
    pub fn towlower(wc: wint_t) -> wint_t;
}
extern "C" {
    pub fn towupper(wc: wint_t) -> wint_t;
}
extern "C" {
    pub fn towctrans(wc: wint_t, desc: wctrans_t) -> wint_t;
}
extern "C" {
    pub fn wctrans(property: *const libc::c_char) -> wctrans_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XBOXRT_mbstate {
    pub __bindgen_anon_1: XBOXRT_mbstate__bindgen_ty_1,
    pub _Surrogate: u16,
    pub _PendState: libc::c_uchar,
    pub _PendChar: libc::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XBOXRT_mbstate__bindgen_ty_1 {
    pub _St64: [u64; 15usize],
    pub _St32: [u32; 31usize],
    pub _St16: [u16; 62usize],
    pub _StUC: [libc::c_uchar; 124usize],
    pub _StSC: [libc::c_schar; 124usize],
    pub _StC: [libc::c_char; 124usize],
}
#[test]
fn bindgen_test_layout_XBOXRT_mbstate__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<XBOXRT_mbstate__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<XBOXRT_mbstate__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(XBOXRT_mbstate__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<XBOXRT_mbstate__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(XBOXRT_mbstate__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._St64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XBOXRT_mbstate__bindgen_ty_1),
            "::",
            stringify!(_St64)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._St32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XBOXRT_mbstate__bindgen_ty_1),
            "::",
            stringify!(_St32)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._St16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XBOXRT_mbstate__bindgen_ty_1),
            "::",
            stringify!(_St16)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._StUC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XBOXRT_mbstate__bindgen_ty_1),
            "::",
            stringify!(_StUC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._StSC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XBOXRT_mbstate__bindgen_ty_1),
            "::",
            stringify!(_StSC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._StC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XBOXRT_mbstate__bindgen_ty_1),
            "::",
            stringify!(_StC)
        )
    );
}
#[test]
fn bindgen_test_layout_XBOXRT_mbstate() {
    const UNINIT: ::core::mem::MaybeUninit<XBOXRT_mbstate> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<XBOXRT_mbstate>(),
        136usize,
        concat!("Size of: ", stringify!(XBOXRT_mbstate))
    );
    assert_eq!(
        ::core::mem::align_of::<XBOXRT_mbstate>(),
        8usize,
        concat!("Alignment of ", stringify!(XBOXRT_mbstate))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._Surrogate) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XBOXRT_mbstate),
            "::",
            stringify!(_Surrogate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._PendState) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(XBOXRT_mbstate),
            "::",
            stringify!(_PendState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr)._PendChar) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(XBOXRT_mbstate),
            "::",
            stringify!(_PendChar)
        )
    );
}
pub type XBOXRT_mbstate_t = XBOXRT_mbstate;
pub type mbstate_t = XBOXRT_mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wcscpy(s1: *mut wchar_t, s2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncpy(s1: *mut wchar_t, s2: *const wchar_t, n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wmemcpy(
        s1: *mut libc::c_ushort,
        s2: *const libc::c_ushort,
        n: libc::c_uint,
    ) -> *mut libc::c_ushort;
}
extern "C" {
    pub fn wmemmove(
        s1: *mut libc::c_ushort,
        s2: *const libc::c_ushort,
        n: libc::c_uint,
    ) -> *mut libc::c_ushort;
}
extern "C" {
    pub fn wcscat(s1: *mut wchar_t, s2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncat(s1: *mut wchar_t, s2: *const wchar_t, n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(s1: *const libc::c_ushort, s2: *const libc::c_ushort) -> libc::c_int;
}
extern "C" {
    pub fn wcscoll(s1: *const wchar_t, s2: *const wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn wcsncmp(
        s1: *const libc::c_ushort,
        s2: *const libc::c_ushort,
        n: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn wcsxfrm(s1: *mut wchar_t, s2: *const wchar_t, n: usize) -> usize;
}
extern "C" {
    pub fn wmemcmp(
        s1: *const libc::c_ushort,
        s2: *const libc::c_ushort,
        n: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn wcschr(s: *const libc::c_ushort, c: libc::c_ushort) -> *mut libc::c_ushort;
}
extern "C" {
    pub fn wcscspn(s1: *const wchar_t, s2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcspbrk(s1: *const wchar_t, s2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(s: *const wchar_t, c: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(s1: *const wchar_t, s2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsstr(s1: *const wchar_t, s2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(s1: *mut wchar_t, s2: *const wchar_t, ptr: *mut *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wmemchr(
        s: *const libc::c_ushort,
        c: libc::c_ushort,
        n: libc::c_uint,
    ) -> *mut libc::c_ushort;
}
extern "C" {
    pub fn wcslen(s: *const libc::c_ushort) -> libc::c_uint;
}
extern "C" {
    pub fn mbsinit(ps: *const mbstate_t) -> libc::c_int;
}
extern "C" {
    pub fn mbrtowc(
        pwc: *mut wchar_t,
        s: *const libc::c_char,
        n: usize,
        ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcrtomb(s: *mut libc::c_char, wc: wchar_t, ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wmemset(wcs: *mut wchar_t, wc: wchar_t, n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(nptr: *const wchar_t, endptr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstof(nptr: *const wchar_t, endptr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(nptr: *const wchar_t, endptr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstol(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: libc::c_int,
    ) -> libc::c_long;
}
extern "C" {
    pub fn wcstoll(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: libc::c_int,
    ) -> libc::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: libc::c_int,
    ) -> libc::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: libc::c_int,
    ) -> libc::c_ulonglong;
}
extern "C" {
    pub fn mbrlen(s: *const libc::c_char, n: usize, ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn btowc(c: libc::c_int) -> wint_t;
}
extern "C" {
    pub fn mbsrtowcs(
        dest: *mut wchar_t,
        src: *mut *const libc::c_char,
        len: usize,
        ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wctob(c: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn wcrtomb_s(
        retval: *mut usize,
        s: *mut libc::c_char,
        ssz: usize,
        wc: wchar_t,
        ps: *mut mbstate_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn _snwprintf(
        buffer: *mut wchar_t,
        count: usize,
        format: *const wchar_t,
        ...
    ) -> libc::c_int;
}
extern "C" {
    pub fn mbtowc(pwc: *mut wchar_t, string: *const libc::c_char, n: usize) -> libc::c_int;
}
pub type __builtin_va_list = *mut libc::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub _address: u8,
}
