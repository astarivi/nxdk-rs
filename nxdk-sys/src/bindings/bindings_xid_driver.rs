/* automatically generated by rust-bindgen 0.69.5 */

pub const NON_CACHE_MASK: u32 = 0;
pub const USB_IRQ: u32 = 1;
pub const OHCI_PORT_CNT: u32 = 4;
pub const OHCI_ISO_DELAY: u32 = 4;
pub const MAX_DESC_BUFF_SIZE: u32 = 4096;
pub const MAX_UDEV_DRIVER: u32 = 8;
pub const MAX_ALT_PER_IFACE: u32 = 12;
pub const MAX_EP_PER_IFACE: u32 = 8;
pub const MAX_HUB_DEVICE: u32 = 8;
pub const MEM_POOL_UNIT_SIZE: u32 = 128;
pub const MEM_POOL_UNIT_NUM: u32 = 96;
pub const USB_MEMORY_POOL_SIZE: u32 = 524288;
pub const __STDC_WANT_LIB_EXT1_PREVIOUS__: i32 = -1;
pub const _PDCLIB_endl: &[u8; 2] = b"\n\0";
pub const _PDCLIB_SUCCESS: u32 = 0;
pub const _PDCLIB_FAILURE: i32 = -1;
pub const _PDCLIB_CHAR_SIGNED: u32 = 1;
pub const _PDCLIB_SHRT_BYTES: u32 = 2;
pub const _PDCLIB_INT_BYTES: u32 = 4;
pub const _PDCLIB_LONG_BYTES: u32 = 4;
pub const _PDCLIB_LLONG_BYTES: u32 = 8;
pub const _PDCLIB_CLOCKS_PER_SEC: u32 = 1000;
pub const _PDCLIB_TIME_UTC: u32 = 1;
pub const _PDCLIB_FLT_ROUNDS: i32 = -1;
pub const _PDCLIB_FLT_EVAL_METHOD: i32 = -1;
pub const _PDCLIB_DECIMAL_DIG: u32 = 17;
pub const _PDCLIB_PAGESIZE: u32 = 4096;
pub const _PDCLIB_MINALLOC: u32 = 8;
pub const _PDCLIB_BUFSIZ: u32 = 1024;
pub const _PDCLIB_FOPEN_MAX: u32 = 8;
pub const _PDCLIB_FILENAME_MAX: u32 = 128;
pub const _PDCLIB_L_tmpnam: u32 = 46;
pub const _PDCLIB_TMP_MAX: u32 = 50;
pub const _PDCLIB_SEEK_SET: u32 = 0;
pub const _PDCLIB_SEEK_CUR: u32 = 1;
pub const _PDCLIB_SEEK_END: u32 = 2;
pub const _PDCLIB_UNGETCBUFSIZE: u32 = 1;
pub const _PDCLIB_ATEXIT_SLOTS: u32 = 40;
pub const _PDCLIB_E2BIG: u32 = 7;
pub const _PDCLIB_EACCES: u32 = 13;
pub const _PDCLIB_EADDRINUSE: u32 = 100;
pub const _PDCLIB_EADDRNOTAVAIL: u32 = 101;
pub const _PDCLIB_EAFNOSUPPORT: u32 = 102;
pub const _PDCLIB_EAGAIN: u32 = 11;
pub const _PDCLIB_EALREADY: u32 = 103;
pub const _PDCLIB_EBADF: u32 = 9;
pub const _PDCLIB_EBADMSG: u32 = 104;
pub const _PDCLIB_EBUSY: u32 = 16;
pub const _PDCLIB_ECANCELED: u32 = 105;
pub const _PDCLIB_ECHILD: u32 = 10;
pub const _PDCLIB_ECONNABORTED: u32 = 106;
pub const _PDCLIB_ECONNREFUSED: u32 = 107;
pub const _PDCLIB_ECONNRESET: u32 = 108;
pub const _PDCLIB_EDEADLK: u32 = 36;
pub const _PDCLIB_EDESTADDRREQ: u32 = 109;
pub const _PDCLIB_EDOM: u32 = 33;
pub const _PDCLIB_EEXIST: u32 = 17;
pub const _PDCLIB_EFAULT: u32 = 14;
pub const _PDCLIB_EFBIG: u32 = 27;
pub const _PDCLIB_EHOSTUNREACH: u32 = 110;
pub const _PDCLIB_EIDRM: u32 = 111;
pub const _PDCLIB_EILSEQ: u32 = 42;
pub const _PDCLIB_EINPROGRESS: u32 = 112;
pub const _PDCLIB_EINTR: u32 = 4;
pub const _PDCLIB_EINVAL: u32 = 22;
pub const _PDCLIB_EIO: u32 = 5;
pub const _PDCLIB_EISCONN: u32 = 113;
pub const _PDCLIB_EISDIR: u32 = 21;
pub const _PDCLIB_ELOOP: u32 = 114;
pub const _PDCLIB_EMFILE: u32 = 24;
pub const _PDCLIB_EMLINK: u32 = 31;
pub const _PDCLIB_EMSGSIZE: u32 = 115;
pub const _PDCLIB_ENAMETOOLONG: u32 = 38;
pub const _PDCLIB_ENETDOWN: u32 = 116;
pub const _PDCLIB_ENETRESET: u32 = 117;
pub const _PDCLIB_ENETUNREACH: u32 = 118;
pub const _PDCLIB_ENFILE: u32 = 23;
pub const _PDCLIB_ENOBUFS: u32 = 119;
pub const _PDCLIB_ENODATA: u32 = 120;
pub const _PDCLIB_ENODEV: u32 = 19;
pub const _PDCLIB_ENOENT: u32 = 2;
pub const _PDCLIB_ENOEXEC: u32 = 8;
pub const _PDCLIB_ENOLCK: u32 = 39;
pub const _PDCLIB_ENOLINK: u32 = 121;
pub const _PDCLIB_ENOMEM: u32 = 12;
pub const _PDCLIB_ENOMSG: u32 = 122;
pub const _PDCLIB_ENOPROTOOPT: u32 = 123;
pub const _PDCLIB_ENOSPC: u32 = 28;
pub const _PDCLIB_ENOSR: u32 = 124;
pub const _PDCLIB_ENOSTR: u32 = 125;
pub const _PDCLIB_ENOSYS: u32 = 40;
pub const _PDCLIB_ENOTCONN: u32 = 126;
pub const _PDCLIB_ENOTDIR: u32 = 20;
pub const _PDCLIB_ENOTEMPTY: u32 = 41;
pub const _PDCLIB_ENOTRECOVERABLE: u32 = 127;
pub const _PDCLIB_ENOTSOCK: u32 = 128;
pub const _PDCLIB_ENOTSUP: u32 = 129;
pub const _PDCLIB_ENOTTY: u32 = 25;
pub const _PDCLIB_ENXIO: u32 = 6;
pub const _PDCLIB_EOPNOTSUPP: u32 = 130;
pub const _PDCLIB_EOVERFLOW: u32 = 132;
pub const _PDCLIB_EOWNERDEAD: u32 = 133;
pub const _PDCLIB_EPERM: u32 = 1;
pub const _PDCLIB_EPIPE: u32 = 32;
pub const _PDCLIB_EPROTO: u32 = 134;
pub const _PDCLIB_EPROTONOSUPPORT: u32 = 135;
pub const _PDCLIB_EPROTOTYPE: u32 = 136;
pub const _PDCLIB_ERANGE: u32 = 34;
pub const _PDCLIB_EROFS: u32 = 30;
pub const _PDCLIB_ESPIPE: u32 = 29;
pub const _PDCLIB_ESRCH: u32 = 3;
pub const _PDCLIB_ETIME: u32 = 137;
pub const _PDCLIB_ETIMEDOUT: u32 = 138;
pub const _PDCLIB_ETXTBSY: u32 = 139;
pub const _PDCLIB_EWOULDBLOCK: u32 = 140;
pub const _PDCLIB_EXDEV: u32 = 18;
pub const _PDCLIB_ERRNO_MAX: u32 = 141;
pub const _PDCLIB_LOCALE_PATH: &[u8; 23] = b"/usr/share/pdclib/i18n\0";
pub const _PDCLIB_ONCE_FLAG_INIT: u32 = 0;
pub const _PDCLIB_TSS_DTOR_ITERATIONS: u32 = 4;
pub const _PDCLIB_HOSTED: u32 = 1;
pub const _PDCLIB_NULL: u32 = 0;
pub const _PDCLIB_CHAR_BIT: u32 = 8;
pub const _PDCLIB_UCHAR_MIN: u32 = 0;
pub const _PDCLIB_UCHAR_MAX: u32 = 255;
pub const _PDCLIB_SCHAR_MIN: i32 = -128;
pub const _PDCLIB_SCHAR_MAX: u32 = 127;
pub const _PDCLIB_CHAR_MIN: i32 = -128;
pub const _PDCLIB_CHAR_MAX: u32 = 127;
pub const _PDCLIB_SHRT_MAX: u32 = 32767;
pub const _PDCLIB_SHRT_MIN: i32 = -32768;
pub const _PDCLIB_USHRT_MAX: u32 = 65535;
pub const _PDCLIB_USHRT_MIN: u32 = 0;
pub const _PDCLIB_INT_MAX: u32 = 2147483647;
pub const _PDCLIB_INT_MIN: i32 = -2147483648;
pub const _PDCLIB_UINT_MAX: u32 = 4294967295;
pub const _PDCLIB_UINT_MIN: u32 = 0;
pub const _PDCLIB_LONG_MAX: u32 = 2147483647;
pub const _PDCLIB_LONG_MIN: i32 = -2147483648;
pub const _PDCLIB_ULONG_MAX: u32 = 4294967295;
pub const _PDCLIB_ULONG_MIN: u32 = 0;
pub const _PDCLIB_LLONG_MAX: u64 = 9223372036854775807;
pub const _PDCLIB_LLONG_MIN: i64 = -9223372036854775808;
pub const _PDCLIB_ULLONG_MAX: i32 = -1;
pub const _PDCLIB_ULLONG_MIN: u32 = 0;
pub const _PDCLIB_INT8_MAX: u32 = 127;
pub const _PDCLIB_INT8_MIN: i32 = -128;
pub const _PDCLIB_UINT8_MAX: u32 = 255;
pub const _PDCLIB_INT16_MAX: u32 = 32767;
pub const _PDCLIB_INT16_MIN: i32 = -32768;
pub const _PDCLIB_UINT16_MAX: u32 = 65535;
pub const _PDCLIB_INT32_MAX: u32 = 2147483647;
pub const _PDCLIB_INT32_MIN: i32 = -2147483648;
pub const _PDCLIB_UINT32_MAX: u32 = 4294967295;
pub const _PDCLIB_INT64_MAX: u64 = 9223372036854775807;
pub const _PDCLIB_INT64_MIN: i64 = -9223372036854775808;
pub const _PDCLIB_UINT64_MAX: i32 = -1;
pub const _PDCLIB_FREAD: u32 = 8;
pub const _PDCLIB_FWRITE: u32 = 16;
pub const _PDCLIB_FAPPEND: u32 = 32;
pub const _PDCLIB_FRW: u32 = 64;
pub const _PDCLIB_FBIN: u32 = 128;
pub const _PDCLIB_FREEBUFFER: u32 = 256;
pub const _PDCLIB_ERRORFLAG: u32 = 512;
pub const _PDCLIB_EOFFLAG: u32 = 1024;
pub const _PDCLIB_WIDESTREAM: u32 = 2048;
pub const _PDCLIB_BYTESTREAM: u32 = 4096;
pub const _PDCLIB_DELONCLOSE: u32 = 8192;
pub const _PDCLIB_STATIC: u32 = 16384;
pub const _PDCLIB_FREENAME: u32 = 32768;
pub const _PDCLIB_LC_ALL: u32 = 0;
pub const _PDCLIB_LC_COLLATE: u32 = 1;
pub const _PDCLIB_LC_CTYPE: u32 = 2;
pub const _PDCLIB_LC_MONETARY: u32 = 3;
pub const _PDCLIB_LC_NUMERIC: u32 = 4;
pub const _PDCLIB_LC_TIME: u32 = 5;
pub const _PDCLIB_LC_MESSAGES: u32 = 6;
pub const _PDCLIB_LC_COUNT: u32 = 7;
pub const _PDCLIB_CTYPE_ALPHA: u32 = 1;
pub const _PDCLIB_CTYPE_BLANK: u32 = 2;
pub const _PDCLIB_CTYPE_CNTRL: u32 = 4;
pub const _PDCLIB_CTYPE_GRAPH: u32 = 8;
pub const _PDCLIB_CTYPE_PUNCT: u32 = 16;
pub const _PDCLIB_CTYPE_SPACE: u32 = 32;
pub const _PDCLIB_CTYPE_LOWER: u32 = 64;
pub const _PDCLIB_CTYPE_UPPER: u32 = 128;
pub const _PDCLIB_CHARSET_SIZE: u32 = 256;
pub const NULL: u32 = 0;
pub const _IOFBF: u32 = 1;
pub const _IOLBF: u32 = 2;
pub const _IONBF: u32 = 4;
pub const EOF: i32 = -1;
pub const BUFSIZ: u32 = 1024;
pub const FOPEN_MAX: u32 = 8;
pub const FILENAME_MAX: u32 = 128;
pub const L_tmpnam: u32 = 46;
pub const TMP_MAX: u32 = 50;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const RAND_MAX: u32 = 32767;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: i32 = -1;
pub const _sys_nerr: u32 = 141;
pub const INT8_MIN: i32 = -128;
pub const INT8_MAX: u32 = 127;
pub const UINT8_MAX: u32 = 255;
pub const INT16_MIN: i32 = -32768;
pub const INT16_MAX: u32 = 32767;
pub const UINT16_MAX: u32 = 65535;
pub const INT32_MIN: i32 = -2147483648;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST8_MAX: u32 = 127;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const MB_CUR_MAX: u32 = 2;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const USBH_OK: u32 = 0;
pub const USBH_ERR_MEMORY_OUT: i32 = -10;
pub const USBH_ERR_IF_ALT_LIMIT: i32 = -11;
pub const USBH_ERR_IF_EP_LIMIT: i32 = -15;
pub const USBH_ERR_NOT_SUPPORTED: i32 = -101;
pub const USBH_ERR_NOT_MATCHED: i32 = -103;
pub const USBH_ERR_NOT_EXPECTED: i32 = -104;
pub const USBH_ERR_INVALID_PARAM: i32 = -105;
pub const USBH_ERR_NOT_FOUND: i32 = -106;
pub const USBH_ERR_EP_NOT_FOUND: i32 = -107;
pub const USBH_ERR_DESCRIPTOR: i32 = -137;
pub const USBH_ERR_SET_DEV_ADDR: i32 = -139;
pub const USBH_ERR_SET_CONFIG: i32 = -151;
pub const USBH_ERR_TRANSFER: i32 = -201;
pub const USBH_ERR_TIMEOUT: i32 = -203;
pub const USBH_ERR_ABORT: i32 = -205;
pub const USBH_ERR_PORT_RESET: i32 = -255;
pub const USBH_ERR_SCH_OVERRUN: i32 = -257;
pub const USBH_ERR_DISCONNECTED: i32 = -259;
pub const USBH_ERR_TRANSACTION: i32 = -271;
pub const USBH_ERR_BABBLE_DETECTED: i32 = -272;
pub const USBH_ERR_DATA_BUFF: i32 = -274;
pub const USBH_ERR_CC_NO_ERR: i32 = -280;
pub const USBH_ERR_CRC: i32 = -281;
pub const USBH_ERR_BIT_STUFF: i32 = -282;
pub const USBH_ERR_DATA_TOGGLE: i32 = -283;
pub const USBH_ERR_STALL: i32 = -284;
pub const USBH_ERR_DEV_NO_RESP: i32 = -285;
pub const USBH_ERR_PID_CHECK: i32 = -286;
pub const USBH_ERR_UNEXPECT_PID: i32 = -287;
pub const USBH_ERR_DATA_OVERRUN: i32 = -288;
pub const USBH_ERR_DATA_UNDERRUN: i32 = -289;
pub const USBH_ERR_BUFF_OVERRUN: i32 = -292;
pub const USBH_ERR_BUFF_UNDERRUN: i32 = -293;
pub const USBH_ERR_NOT_ACCESS0: i32 = -294;
pub const USBH_ERR_NOT_ACCESS1: i32 = -295;
pub const USBH_ERR_OHCI_INIT: i32 = -301;
pub const USBH_ERR_OHCI_EP_BUSY: i32 = -303;
pub const USBH_ERR_EHCI_INIT: i32 = -501;
pub const USBH_ERR_EHCI_QH_BUSY: i32 = -503;
pub const UMAS_OK: u32 = 0;
pub const UMAS_ERR_NO_DEVICE: i32 = -1031;
pub const UMAS_ERR_IO: i32 = -1033;
pub const UMAS_ERR_INIT_DEVICE: i32 = -1035;
pub const UMAS_ERR_CMD_STATUS: i32 = -1037;
pub const UMAS_ERR_IVALID_PARM: i32 = -1038;
pub const UMAS_ERR_DRIVE_NOT_FOUND: i32 = -1039;
pub const HID_RET_OK: u32 = 0;
pub const HID_RET_DEV_NOT_FOUND: i32 = -1081;
pub const HID_RET_IO_ERR: i32 = -1082;
pub const HID_RET_INVALID_PARAMETER: i32 = -1083;
pub const HID_RET_OUT_OF_MEMORY: i32 = -1084;
pub const HID_RET_NOT_SUPPORTED: i32 = -1085;
pub const HID_RET_EP_NOT_FOUND: i32 = -1086;
pub const HID_RET_XFER_IS_RUNNING: i32 = -1089;
pub const UAC_RET_OK: u32 = 0;
pub const UAC_RET_DEV_NOT_FOUND: i32 = -2001;
pub const UAC_RET_FUNC_NOT_FOUND: i32 = -2002;
pub const UAC_RET_IO_ERR: i32 = -2003;
pub const UAC_RET_DATA_LEN: i32 = -2004;
pub const UAC_RET_INVALID: i32 = -2005;
pub const UAC_RET_OUT_OF_MEMORY: i32 = -2007;
pub const UAC_RET_DRV_NOT_SUPPORTED: i32 = -2009;
pub const UAC_RET_DEV_NOT_SUPPORTED: i32 = -2011;
pub const UAC_RET_PARSER: i32 = -2013;
pub const UAC_RET_IS_STREAMING: i32 = -2015;
pub const UVC_RET_OK: u32 = 0;
pub const UVC_RET_DEV_NOT_FOUND: i32 = -3001;
pub const UVC_RET_FUNC_NOT_FOUND: i32 = -3002;
pub const UVC_RET_IO_ERR: i32 = -3003;
pub const UVC_RET_DATA_LEN: i32 = -3004;
pub const UVC_RET_INVALID: i32 = -3005;
pub const UVC_RET_OUT_OF_MEMORY: i32 = -3007;
pub const UVC_RET_DRV_NOT_SUPPORTED: i32 = -3009;
pub const UVC_RET_DEV_NOT_SUPPORTED: i32 = -3011;
pub const UVC_RET_NOT_SUPPORT: i32 = -3012;
pub const UVC_RET_PARSER: i32 = -3013;
pub const UVC_RET_IS_STREAMING: i32 = -3015;
pub const FL_SIZE: u32 = 1024;
pub const NUM_IQH: u32 = 11;
pub const QTD_LIST_END: u32 = 1;
pub const QTD_STS_PS_OUT: u32 = 0;
pub const QTD_STS_PS_PING: u32 = 1;
pub const QTD_STS_SPLIT_STRAT: u32 = 0;
pub const QTD_STS_SPLIT_COMPLETE: u32 = 2;
pub const QTD_STS_MISS_MF: u32 = 4;
pub const QTD_STS_XactErr: u32 = 8;
pub const QTD_STS_BABBLE: u32 = 16;
pub const QTD_STS_DATA_BUFF_ERR: u32 = 32;
pub const QTD_STS_HALT: u32 = 64;
pub const QTD_STS_ACTIVE: u32 = 128;
pub const QTD_PID_Msk: u32 = 768;
pub const QTD_PID_OUT: u32 = 0;
pub const QTD_PID_IN: u32 = 256;
pub const QTD_PID_SETUP: u32 = 512;
pub const QTD_ERR_COUNTER: u32 = 3072;
pub const QTD_IOC: u32 = 32768;
pub const QTD_TODO_LEN_Pos: u32 = 16;
pub const QTD_DT: u32 = 2147483648;
pub const QH_HLNK_END: u32 = 1;
pub const QH_NAK_RL: u32 = 1073741824;
pub const QH_CTRL_EP_FLAG: u32 = 134217728;
pub const QH_RCLM_LIST_HEAD: u32 = 32768;
pub const QH_DTC: u32 = 16384;
pub const QH_EPS_FULL: u32 = 0;
pub const QH_EPS_LOW: u32 = 4096;
pub const QH_EPS_HIGH: u32 = 8192;
pub const QH_I_NEXT: u32 = 128;
pub const QH_MULT_Pos: u32 = 30;
pub const QH_HUB_PORT_Pos: u32 = 23;
pub const QH_HUB_ADDR_Pos: u32 = 16;
pub const QH_C_MASK_Msk: u32 = 65280;
pub const QH_S_MASK_Msk: u32 = 255;
pub const ITD_STATUS_ACTIVE: u32 = 2147483648;
pub const ITD_STATUS_BUFF_ERR: u32 = 1073741824;
pub const ITD_STATUS_BABBLE: u32 = 536870912;
pub const ITD_STATUS_XACT_ERR: u32 = 268435456;
pub const ITD_XLEN_Pos: u32 = 16;
pub const ITD_IOC: u32 = 32768;
pub const ITD_PG_Pos: u32 = 12;
pub const ITD_XFER_OFF_Msk: u32 = 4095;
pub const ITD_BUFF_PAGE_Pos: u32 = 12;
pub const ITD_EP_NUM_Pos: u32 = 8;
pub const ITD_DEV_ADDR_Pos: u32 = 0;
pub const ITD_DIR_IN: u32 = 2048;
pub const ITD_DIR_OUT: u32 = 0;
pub const ITD_MAX_PKTSZ_Pos: u32 = 0;
pub const SITD_LIST_END: u32 = 1;
pub const SITD_XFER_IO_Msk: u32 = 2147483648;
pub const SITD_XFER_IN: u32 = 2147483648;
pub const SITD_XFER_OUT: u32 = 0;
pub const SITD_PORT_NUM_Pos: u32 = 24;
pub const SITD_HUB_ADDR_Pos: u32 = 16;
pub const SITD_EP_NUM_Pos: u32 = 8;
pub const SITD_DEV_ADDR_Pos: u32 = 0;
pub const SITD_IOC: u32 = 2147483648;
pub const SITD_XFER_CNT_Pos: u32 = 16;
pub const SITD_XFER_CNT_Msk: u32 = 67043328;
pub const SITD_STATUS_ACTIVE: u32 = 128;
pub const SITD_STATUS_ERR: u32 = 64;
pub const SITD_STATUS_BUFF_ERR: u32 = 32;
pub const SITD_BABBLE_DETECTED: u32 = 16;
pub const SITD_STATUS_XFER_ERR: u32 = 8;
pub const SITD_STATUS_MISSED_MF: u32 = 4;
pub const SITD_STATUS_ERROR_MASK: u32 = 120;
pub const ED_CTRL_FA_Pos: u32 = 0;
pub const ED_CTRL_EN_Pos: u32 = 7;
pub const ED_CTRL_DIR_Pos: u32 = 11;
pub const ED_CTRL_MPS_Pos: u32 = 16;
pub const ED_FUNC_ADDR_Msk: u32 = 127;
pub const ED_EP_ADDR_Msk: u32 = 1920;
pub const ED_DIR_Msk: u32 = 6144;
pub const ED_SPEED_Msk: u32 = 8192;
pub const ED_MAX_PK_SIZE_Msk: u32 = 134152192;
pub const ED_DIR_BY_TD: u32 = 0;
pub const ED_DIR_OUT: u32 = 2048;
pub const ED_DIR_IN: u32 = 4096;
pub const ED_SPEED_FULL: u32 = 0;
pub const ED_SPEED_LOW: u32 = 8192;
pub const ED_SKIP: u32 = 16384;
pub const ED_FORMAT_GENERAL: u32 = 0;
pub const ED_FORMAT_ISO: u32 = 32768;
pub const ED_HEADP_HALT: u32 = 1;
pub const TD_ADDR_MASK: u32 = 4294967292;
pub const TD_CC: u32 = 4026531840;
pub const TD_T_DATA0: u32 = 33554432;
pub const TD_T_DATA1: u32 = 50331648;
pub const TD_R: u32 = 262144;
pub const TD_DP: u32 = 1572864;
pub const TD_DP_IN: u32 = 1048576;
pub const TD_DP_OUT: u32 = 524288;
pub const MAXPSW: u32 = 8;
pub const TD_TYPE_Msk: u32 = 196608;
pub const TD_TYPE_CTRL: u32 = 0;
pub const TD_TYPE_BULK: u32 = 65536;
pub const TD_TYPE_INT: u32 = 131072;
pub const TD_TYPE_ISO: u32 = 196608;
pub const TD_CTRL_Msk: u32 = 229376;
pub const TD_CTRL_DATA: u32 = 32768;
pub const USBH_HcRevision_REV_Pos: u32 = 0;
pub const USBH_HcRevision_REV_Msk: u32 = 255;
pub const USBH_HcControl_CBSR_Pos: u32 = 0;
pub const USBH_HcControl_CBSR_Msk: u32 = 3;
pub const USBH_HcControl_PLE_Pos: u32 = 2;
pub const USBH_HcControl_PLE_Msk: u32 = 4;
pub const USBH_HcControl_IE_Pos: u32 = 3;
pub const USBH_HcControl_IE_Msk: u32 = 8;
pub const USBH_HcControl_CLE_Pos: u32 = 4;
pub const USBH_HcControl_CLE_Msk: u32 = 16;
pub const USBH_HcControl_BLE_Pos: u32 = 5;
pub const USBH_HcControl_BLE_Msk: u32 = 32;
pub const USBH_HcControl_HCFS_Pos: u32 = 6;
pub const USBH_HcControl_HCFS_Msk: u32 = 192;
pub const USBH_HcCommandStatus_HCR_Pos: u32 = 0;
pub const USBH_HcCommandStatus_HCR_Msk: u32 = 1;
pub const USBH_HcCommandStatus_CLF_Pos: u32 = 1;
pub const USBH_HcCommandStatus_CLF_Msk: u32 = 2;
pub const USBH_HcCommandStatus_BLF_Pos: u32 = 2;
pub const USBH_HcCommandStatus_BLF_Msk: u32 = 4;
pub const USBH_HcCommandStatus_SOC_Pos: u32 = 16;
pub const USBH_HcCommandStatus_SOC_Msk: u32 = 196608;
pub const USBH_HcInterruptStatus_SO_Pos: u32 = 0;
pub const USBH_HcInterruptStatus_SO_Msk: u32 = 1;
pub const USBH_HcInterruptStatus_WDH_Pos: u32 = 1;
pub const USBH_HcInterruptStatus_WDH_Msk: u32 = 2;
pub const USBH_HcInterruptStatus_SF_Pos: u32 = 2;
pub const USBH_HcInterruptStatus_SF_Msk: u32 = 4;
pub const USBH_HcInterruptStatus_RD_Pos: u32 = 3;
pub const USBH_HcInterruptStatus_RD_Msk: u32 = 8;
pub const USBH_HcInterruptStatus_FNO_Pos: u32 = 5;
pub const USBH_HcInterruptStatus_FNO_Msk: u32 = 32;
pub const USBH_HcInterruptStatus_RHSC_Pos: u32 = 6;
pub const USBH_HcInterruptStatus_RHSC_Msk: u32 = 64;
pub const USBH_HcInterruptEnable_SO_Pos: u32 = 0;
pub const USBH_HcInterruptEnable_SO_Msk: u32 = 1;
pub const USBH_HcInterruptEnable_WDH_Pos: u32 = 1;
pub const USBH_HcInterruptEnable_WDH_Msk: u32 = 2;
pub const USBH_HcInterruptEnable_SF_Pos: u32 = 2;
pub const USBH_HcInterruptEnable_SF_Msk: u32 = 4;
pub const USBH_HcInterruptEnable_RD_Pos: u32 = 3;
pub const USBH_HcInterruptEnable_RD_Msk: u32 = 8;
pub const USBH_HcInterruptEnable_FNO_Pos: u32 = 5;
pub const USBH_HcInterruptEnable_FNO_Msk: u32 = 32;
pub const USBH_HcInterruptEnable_RHSC_Pos: u32 = 6;
pub const USBH_HcInterruptEnable_RHSC_Msk: u32 = 64;
pub const USBH_HcInterruptEnable_MIE_Pos: u32 = 31;
pub const USBH_HcInterruptEnable_MIE_Msk: u32 = 2147483648;
pub const USBH_HcInterruptDisable_SO_Pos: u32 = 0;
pub const USBH_HcInterruptDisable_SO_Msk: u32 = 1;
pub const USBH_HcInterruptDisable_WDH_Pos: u32 = 1;
pub const USBH_HcInterruptDisable_WDH_Msk: u32 = 2;
pub const USBH_HcInterruptDisable_SF_Pos: u32 = 2;
pub const USBH_HcInterruptDisable_SF_Msk: u32 = 4;
pub const USBH_HcInterruptDisable_RD_Pos: u32 = 3;
pub const USBH_HcInterruptDisable_RD_Msk: u32 = 8;
pub const USBH_HcInterruptDisable_FNO_Pos: u32 = 5;
pub const USBH_HcInterruptDisable_FNO_Msk: u32 = 32;
pub const USBH_HcInterruptDisable_RHSC_Pos: u32 = 6;
pub const USBH_HcInterruptDisable_RHSC_Msk: u32 = 64;
pub const USBH_HcInterruptDisable_MIE_Pos: u32 = 31;
pub const USBH_HcInterruptDisable_MIE_Msk: u32 = 2147483648;
pub const USBH_HcHCCA_HCCA_Pos: u32 = 8;
pub const USBH_HcHCCA_HCCA_Msk: u32 = 4294967040;
pub const USBH_HcPeriodCurrentED_PCED_Pos: u32 = 4;
pub const USBH_HcPeriodCurrentED_PCED_Msk: u32 = 4294967280;
pub const USBH_HcControlHeadED_CHED_Pos: u32 = 4;
pub const USBH_HcControlHeadED_CHED_Msk: u32 = 4294967280;
pub const USBH_HcControlCurrentED_CCED_Pos: u32 = 4;
pub const USBH_HcControlCurrentED_CCED_Msk: u32 = 4294967280;
pub const USBH_HcBulkHeadED_BHED_Pos: u32 = 4;
pub const USBH_HcBulkHeadED_BHED_Msk: u32 = 4294967280;
pub const USBH_HcBulkCurrentED_BCED_Pos: u32 = 4;
pub const USBH_HcBulkCurrentED_BCED_Msk: u32 = 4294967280;
pub const USBH_HcDoneHead_DH_Pos: u32 = 4;
pub const USBH_HcDoneHead_DH_Msk: u32 = 4294967280;
pub const USBH_HcFmInterval_FI_Pos: u32 = 0;
pub const USBH_HcFmInterval_FI_Msk: u32 = 16383;
pub const USBH_HcFmInterval_FSMPS_Pos: u32 = 16;
pub const USBH_HcFmInterval_FSMPS_Msk: u32 = 2147418112;
pub const USBH_HcFmInterval_FIT_Pos: u32 = 31;
pub const USBH_HcFmInterval_FIT_Msk: u32 = 2147483648;
pub const USBH_HcFmRemaining_FR_Pos: u32 = 0;
pub const USBH_HcFmRemaining_FR_Msk: u32 = 16383;
pub const USBH_HcFmRemaining_FRT_Pos: u32 = 31;
pub const USBH_HcFmRemaining_FRT_Msk: u32 = 2147483648;
pub const USBH_HcFmNumber_FN_Pos: u32 = 0;
pub const USBH_HcFmNumber_FN_Msk: u32 = 65535;
pub const USBH_HcPeriodicStart_PS_Pos: u32 = 0;
pub const USBH_HcPeriodicStart_PS_Msk: u32 = 16383;
pub const USBH_HcLSThreshold_LST_Pos: u32 = 0;
pub const USBH_HcLSThreshold_LST_Msk: u32 = 4095;
pub const USBH_HcRhDescriptorA_NDP_Pos: u32 = 0;
pub const USBH_HcRhDescriptorA_NDP_Msk: u32 = 255;
pub const USBH_HcRhDescriptorA_PSM_Pos: u32 = 8;
pub const USBH_HcRhDescriptorA_PSM_Msk: u32 = 256;
pub const USBH_HcRhDescriptorA_OCPM_Pos: u32 = 11;
pub const USBH_HcRhDescriptorA_OCPM_Msk: u32 = 2048;
pub const USBH_HcRhDescriptorA_NOCP_Pos: u32 = 12;
pub const USBH_HcRhDescriptorA_NOCP_Msk: u32 = 4096;
pub const USBH_HcRhDescriptorB_PPCM_Pos: u32 = 16;
pub const USBH_HcRhDescriptorB_PPCM_Msk: u32 = 4294901760;
pub const USBH_HcRhStatus_LPS_Pos: u32 = 0;
pub const USBH_HcRhStatus_LPS_Msk: u32 = 1;
pub const USBH_HcRhStatus_OCI_Pos: u32 = 1;
pub const USBH_HcRhStatus_OCI_Msk: u32 = 2;
pub const USBH_HcRhStatus_DRWE_Pos: u32 = 15;
pub const USBH_HcRhStatus_DRWE_Msk: u32 = 32768;
pub const USBH_HcRhStatus_LPSC_Pos: u32 = 16;
pub const USBH_HcRhStatus_LPSC_Msk: u32 = 65536;
pub const USBH_HcRhStatus_OCIC_Pos: u32 = 17;
pub const USBH_HcRhStatus_OCIC_Msk: u32 = 131072;
pub const USBH_HcRhStatus_CRWE_Pos: u32 = 31;
pub const USBH_HcRhStatus_CRWE_Msk: u32 = 2147483648;
pub const USBH_HcRhPortStatus_CCS_Pos: u32 = 0;
pub const USBH_HcRhPortStatus_CCS_Msk: u32 = 1;
pub const USBH_HcRhPortStatus_PES_Pos: u32 = 1;
pub const USBH_HcRhPortStatus_PES_Msk: u32 = 2;
pub const USBH_HcRhPortStatus_PSS_Pos: u32 = 2;
pub const USBH_HcRhPortStatus_PSS_Msk: u32 = 4;
pub const USBH_HcRhPortStatus_POCI_Pos: u32 = 3;
pub const USBH_HcRhPortStatus_POCI_Msk: u32 = 8;
pub const USBH_HcRhPortStatus_PRS_Pos: u32 = 4;
pub const USBH_HcRhPortStatus_PRS_Msk: u32 = 16;
pub const USBH_HcRhPortStatus_PPS_Pos: u32 = 8;
pub const USBH_HcRhPortStatus_PPS_Msk: u32 = 256;
pub const USBH_HcRhPortStatus_LSDA_Pos: u32 = 9;
pub const USBH_HcRhPortStatus_LSDA_Msk: u32 = 512;
pub const USBH_HcRhPortStatus_CSC_Pos: u32 = 16;
pub const USBH_HcRhPortStatus_CSC_Msk: u32 = 65536;
pub const USBH_HcRhPortStatus_PESC_Pos: u32 = 17;
pub const USBH_HcRhPortStatus_PESC_Msk: u32 = 131072;
pub const USBH_HcRhPortStatus_PSSC_Pos: u32 = 18;
pub const USBH_HcRhPortStatus_PSSC_Msk: u32 = 262144;
pub const USBH_HcRhPortStatus_OCIC_Pos: u32 = 19;
pub const USBH_HcRhPortStatus_OCIC_Msk: u32 = 524288;
pub const USBH_HcRhPortStatus_PRSC_Pos: u32 = 20;
pub const USBH_HcRhPortStatus_PRSC_Msk: u32 = 1048576;
pub const USBH_HcPhyControl_STBYEN_Pos: u32 = 27;
pub const USBH_HcPhyControl_STBYEN_Msk: u32 = 134217728;
pub const USBH_HcMiscControl_ABORT_Pos: u32 = 1;
pub const USBH_HcMiscControl_ABORT_Msk: u32 = 2;
pub const USBH_HcMiscControl_OCAL_Pos: u32 = 3;
pub const USBH_HcMiscControl_OCAL_Msk: u32 = 8;
pub const USBH_HcMiscControl_DPRT1_Pos: u32 = 16;
pub const USBH_HcMiscControl_DPRT1_Msk: u32 = 65536;
pub const HSUSBH_EHCVNR_CRLEN_Pos: u32 = 0;
pub const HSUSBH_EHCVNR_CRLEN_Msk: u32 = 255;
pub const HSUSBH_EHCVNR_VERSION_Pos: u32 = 16;
pub const HSUSBH_EHCVNR_VERSION_Msk: u32 = 4294901760;
pub const HSUSBH_EHCSPR_N_PORTS_Pos: u32 = 0;
pub const HSUSBH_EHCSPR_N_PORTS_Msk: u32 = 15;
pub const HSUSBH_EHCSPR_PPC_Pos: u32 = 4;
pub const HSUSBH_EHCSPR_PPC_Msk: u32 = 16;
pub const HSUSBH_EHCSPR_N_PCC_Pos: u32 = 8;
pub const HSUSBH_EHCSPR_N_PCC_Msk: u32 = 3840;
pub const HSUSBH_EHCSPR_N_CC_Pos: u32 = 12;
pub const HSUSBH_EHCSPR_N_CC_Msk: u32 = 61440;
pub const HSUSBH_EHCCPR_AC64_Pos: u32 = 0;
pub const HSUSBH_EHCCPR_AC64_Msk: u32 = 1;
pub const HSUSBH_EHCCPR_PFLF_Pos: u32 = 1;
pub const HSUSBH_EHCCPR_PFLF_Msk: u32 = 2;
pub const HSUSBH_EHCCPR_ASPC_Pos: u32 = 2;
pub const HSUSBH_EHCCPR_ASPC_Msk: u32 = 4;
pub const HSUSBH_EHCCPR_IST_Pos: u32 = 4;
pub const HSUSBH_EHCCPR_IST_Msk: u32 = 240;
pub const HSUSBH_EHCCPR_EECP_Pos: u32 = 8;
pub const HSUSBH_EHCCPR_EECP_Msk: u32 = 65280;
pub const HSUSBH_UCMDR_RUN_Pos: u32 = 0;
pub const HSUSBH_UCMDR_RUN_Msk: u32 = 1;
pub const HSUSBH_UCMDR_HCRST_Pos: u32 = 1;
pub const HSUSBH_UCMDR_HCRST_Msk: u32 = 2;
pub const HSUSBH_UCMDR_FLSZ_Pos: u32 = 2;
pub const HSUSBH_UCMDR_FLSZ_Msk: u32 = 12;
pub const HSUSBH_UCMDR_PSEN_Pos: u32 = 4;
pub const HSUSBH_UCMDR_PSEN_Msk: u32 = 16;
pub const HSUSBH_UCMDR_ASEN_Pos: u32 = 5;
pub const HSUSBH_UCMDR_ASEN_Msk: u32 = 32;
pub const HSUSBH_UCMDR_IAAD_Pos: u32 = 6;
pub const HSUSBH_UCMDR_IAAD_Msk: u32 = 64;
pub const HSUSBH_UCMDR_ITC_Pos: u32 = 16;
pub const HSUSBH_UCMDR_ITC_Msk: u32 = 16711680;
pub const HSUSBH_USTSR_USBINT_Pos: u32 = 0;
pub const HSUSBH_USTSR_USBINT_Msk: u32 = 1;
pub const HSUSBH_USTSR_UERRINT_Pos: u32 = 1;
pub const HSUSBH_USTSR_UERRINT_Msk: u32 = 2;
pub const HSUSBH_USTSR_PCD_Pos: u32 = 2;
pub const HSUSBH_USTSR_PCD_Msk: u32 = 4;
pub const HSUSBH_USTSR_FLR_Pos: u32 = 3;
pub const HSUSBH_USTSR_FLR_Msk: u32 = 8;
pub const HSUSBH_USTSR_HSERR_Pos: u32 = 4;
pub const HSUSBH_USTSR_HSERR_Msk: u32 = 16;
pub const HSUSBH_USTSR_IAA_Pos: u32 = 5;
pub const HSUSBH_USTSR_IAA_Msk: u32 = 32;
pub const HSUSBH_USTSR_HCHalted_Pos: u32 = 12;
pub const HSUSBH_USTSR_HCHalted_Msk: u32 = 4096;
pub const HSUSBH_USTSR_RECLA_Pos: u32 = 13;
pub const HSUSBH_USTSR_RECLA_Msk: u32 = 8192;
pub const HSUSBH_USTSR_PSS_Pos: u32 = 14;
pub const HSUSBH_USTSR_PSS_Msk: u32 = 16384;
pub const HSUSBH_USTSR_ASS_Pos: u32 = 15;
pub const HSUSBH_USTSR_ASS_Msk: u32 = 32768;
pub const HSUSBH_UIENR_USBIEN_Pos: u32 = 0;
pub const HSUSBH_UIENR_USBIEN_Msk: u32 = 1;
pub const HSUSBH_UIENR_UERRIEN_Pos: u32 = 1;
pub const HSUSBH_UIENR_UERRIEN_Msk: u32 = 2;
pub const HSUSBH_UIENR_PCIEN_Pos: u32 = 2;
pub const HSUSBH_UIENR_PCIEN_Msk: u32 = 4;
pub const HSUSBH_UIENR_FLREN_Pos: u32 = 3;
pub const HSUSBH_UIENR_FLREN_Msk: u32 = 8;
pub const HSUSBH_UIENR_HSERREN_Pos: u32 = 4;
pub const HSUSBH_UIENR_HSERREN_Msk: u32 = 16;
pub const HSUSBH_UIENR_IAAEN_Pos: u32 = 5;
pub const HSUSBH_UIENR_IAAEN_Msk: u32 = 32;
pub const HSUSBH_UFINDR_FI_Pos: u32 = 0;
pub const HSUSBH_UFINDR_FI_Msk: u32 = 16383;
pub const HSUSBH_UPFLBAR_BADDR_Pos: u32 = 12;
pub const HSUSBH_UPFLBAR_BADDR_Msk: u32 = 4294963200;
pub const HSUSBH_UCALAR_LPL_Pos: u32 = 5;
pub const HSUSBH_UCALAR_LPL_Msk: u32 = 4294967264;
pub const HSUSBH_UASSTR_ASSTMR_Pos: u32 = 0;
pub const HSUSBH_UASSTR_ASSTMR_Msk: u32 = 4095;
pub const HSUSBH_UCFGR_CF_Pos: u32 = 0;
pub const HSUSBH_UCFGR_CF_Msk: u32 = 1;
pub const HSUSBH_UPSCR_CCS_Pos: u32 = 0;
pub const HSUSBH_UPSCR_CCS_Msk: u32 = 1;
pub const HSUSBH_UPSCR_CSC_Pos: u32 = 1;
pub const HSUSBH_UPSCR_CSC_Msk: u32 = 2;
pub const HSUSBH_UPSCR_PE_Pos: u32 = 2;
pub const HSUSBH_UPSCR_PE_Msk: u32 = 4;
pub const HSUSBH_UPSCR_PEC_Pos: u32 = 3;
pub const HSUSBH_UPSCR_PEC_Msk: u32 = 8;
pub const HSUSBH_UPSCR_OCA_Pos: u32 = 4;
pub const HSUSBH_UPSCR_OCA_Msk: u32 = 16;
pub const HSUSBH_UPSCR_OCC_Pos: u32 = 5;
pub const HSUSBH_UPSCR_OCC_Msk: u32 = 32;
pub const HSUSBH_UPSCR_FPR_Pos: u32 = 6;
pub const HSUSBH_UPSCR_FPR_Msk: u32 = 64;
pub const HSUSBH_UPSCR_SUSPEND_Pos: u32 = 7;
pub const HSUSBH_UPSCR_SUSPEND_Msk: u32 = 128;
pub const HSUSBH_UPSCR_PRST_Pos: u32 = 8;
pub const HSUSBH_UPSCR_PRST_Msk: u32 = 256;
pub const HSUSBH_UPSCR_LSTS_Pos: u32 = 10;
pub const HSUSBH_UPSCR_LSTS_Msk: u32 = 3072;
pub const HSUSBH_UPSCR_PP_Pos: u32 = 12;
pub const HSUSBH_UPSCR_PP_Msk: u32 = 4096;
pub const HSUSBH_UPSCR_PO_Pos: u32 = 13;
pub const HSUSBH_UPSCR_PO_Msk: u32 = 8192;
pub const HSUSBH_UPSCR_PTC_Pos: u32 = 16;
pub const HSUSBH_UPSCR_PTC_Msk: u32 = 983040;
pub const HSUSBH_USBPCR0_SUSPEND_Pos: u32 = 8;
pub const HSUSBH_USBPCR0_SUSPEND_Msk: u32 = 256;
pub const HSUSBH_USBPCR0_CLKVALID_Pos: u32 = 11;
pub const HSUSBH_USBPCR0_CLKVALID_Msk: u32 = 2048;
pub const HSUSBH_USBPCR1_SUSPEND_Pos: u32 = 8;
pub const HSUSBH_USBPCR1_SUSPEND_Msk: u32 = 256;
pub const REQ_TYPE_OUT: u32 = 0;
pub const REQ_TYPE_IN: u32 = 128;
pub const REQ_TYPE_STD_DEV: u32 = 0;
pub const REQ_TYPE_CLASS_DEV: u32 = 32;
pub const REQ_TYPE_VENDOR_DEV: u32 = 64;
pub const REQ_TYPE_TO_DEV: u32 = 0;
pub const REQ_TYPE_TO_IFACE: u32 = 1;
pub const REQ_TYPE_TO_EP: u32 = 2;
pub const REQ_TYPE_TO_OTHER: u32 = 3;
pub const USB_REQ_GET_STATUS: u32 = 0;
pub const USB_REQ_CLEAR_FEATURE: u32 = 1;
pub const USB_REQ_SET_FEATURE: u32 = 3;
pub const USB_REQ_SET_ADDRESS: u32 = 5;
pub const USB_REQ_GET_DESCRIPTOR: u32 = 6;
pub const USB_REQ_SET_CONFIGURATION: u32 = 9;
pub const USB_REQ_SET_INTERFACE: u32 = 11;
pub const USB_DT_STANDARD: u32 = 0;
pub const USB_DT_CLASS: u32 = 32;
pub const USB_DT_VENDOR: u32 = 64;
pub const USB_DT_DEVICE: u32 = 1;
pub const USB_DT_CONFIGURATION: u32 = 2;
pub const USB_DT_STRING: u32 = 3;
pub const USB_DT_INTERFACE: u32 = 4;
pub const USB_DT_ENDPOINT: u32 = 5;
pub const USB_DT_DEVICE_QUALIFIER: u32 = 6;
pub const USB_DT_OTHER_SPEED_CONF: u32 = 7;
pub const USB_DT_IFACE_POWER: u32 = 8;
pub const USB_CLASS_AUDIO: u32 = 1;
pub const USB_CLASS_COMM: u32 = 2;
pub const USB_CLASS_HID: u32 = 3;
pub const USB_CLASS_PRINTER: u32 = 7;
pub const USB_CLASS_MASS_STORAGE: u32 = 8;
pub const USB_CLASS_HUB: u32 = 9;
pub const USB_CLASS_DATA: u32 = 10;
pub const USB_CLASS_VIDEO: u32 = 14;
pub const EP_ADDR_DIR_MASK: u32 = 128;
pub const EP_ADDR_DIR_IN: u32 = 128;
pub const EP_ADDR_DIR_OUT: u32 = 0;
pub const EP_ATTR_TT_MASK: u32 = 3;
pub const EP_ATTR_TT_CTRL: u32 = 0;
pub const EP_ATTR_TT_ISO: u32 = 1;
pub const EP_ATTR_TT_BULK: u32 = 2;
pub const EP_ATTR_TT_INT: u32 = 3;
pub const IF_PER_UTR: u32 = 8;
pub const CONFIG_XID_MAX_DEV: u32 = 4;
pub const XID_MAX_TRANSFER_QUEUE: u32 = 4;
pub const XID_INTERFACE_CLASS: u32 = 88;
pub const XID_INTERFACE_SUBCLASS: u32 = 66;
pub const XID_TYPE_GAMECONTROLLER: u32 = 1;
pub const XID_TYPE_XREMOTE: u32 = 3;
pub const XID_TYPE_STEELBATTALION: u32 = 128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_div_t {
    pub quot: libc::c_int,
    pub rem: libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_ldiv_t {
    pub quot: libc::c_long,
    pub rem: libc::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lldiv_t {
    pub quot: libc::c_longlong,
    pub rem: libc::c_longlong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_imaxdiv_t {
    pub quot: libc::c_longlong,
    pub rem: libc::c_longlong,
}
pub type _PDCLIB_va_list = __builtin_va_list;
pub type _PDCLIB_fd_t = *mut libc::c_void;
pub type _PDCLIB_thrd_t = *mut libc::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __PDCLIB_cnd_t {
    pub eventHandles: [*mut libc::c_void; 2usize],
    pub waitCount: u32,
}
pub type _PDCLIB_cnd_t = __PDCLIB_cnd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __PDCLIB_mtx_t {
    pub handle: *mut libc::c_void,
}
pub type _PDCLIB_mtx_t = __PDCLIB_mtx_t;
pub type _PDCLIB_tss_t = libc::c_uint;
pub type _PDCLIB_once_flag = libc::c_int;
pub type _PDCLIB_int8_t = libc::c_schar;
pub type _PDCLIB_uint8_t = libc::c_uchar;
pub type _PDCLIB_int16_t = libc::c_short;
pub type _PDCLIB_uint16_t = libc::c_ushort;
pub type _PDCLIB_int32_t = libc::c_int;
pub type _PDCLIB_uint32_t = libc::c_uint;
pub type _PDCLIB_int64_t = libc::c_longlong;
pub type _PDCLIB_uint64_t = libc::c_ulonglong;
pub type _PDCLIB_int_fast8_t = libc::c_int;
pub type _PDCLIB_uint_fast8_t = libc::c_uint;
pub type _PDCLIB_int_fast16_t = libc::c_int;
pub type _PDCLIB_uint_fast16_t = libc::c_uint;
pub type _PDCLIB_int_fast32_t = libc::c_int;
pub type _PDCLIB_uint_fast32_t = libc::c_uint;
pub type _PDCLIB_int_fast64_t = libc::c_long;
pub type _PDCLIB_uint_fast64_t = libc::c_ulong;
pub type _PDCLIB_ptrdiff_t = libc::c_int;
pub type _PDCLIB_size_t = libc::c_uint;
pub type _PDCLIB_wchar_t = libc::c_ushort;
pub type _PDCLIB_wint_t = libc::c_ushort;
pub type _PDCLIB_intptr_t = libc::c_long;
pub type _PDCLIB_uintptr_t = libc::c_ulong;
pub type _PDCLIB_intmax_t = libc::c_longlong;
pub type _PDCLIB_uintmax_t = libc::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_fpos_t {
    pub offset: _PDCLIB_uint64_t,
    pub status: libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_file_t {
    pub handle: _PDCLIB_fd_t,
    pub buffer: *mut libc::c_char,
    pub bufsize: _PDCLIB_size_t,
    pub bufidx: _PDCLIB_size_t,
    pub bufend: _PDCLIB_size_t,
    pub pos: _PDCLIB_fpos_t,
    pub ungetidx: _PDCLIB_size_t,
    pub ungetbuf: *mut libc::c_uchar,
    pub status: libc::c_uint,
    pub filename: *mut libc::c_char,
    pub next: *mut _PDCLIB_file_t,
}
pub type _PDCLIB_time_t = libc::c_long;
pub type _PDCLIB_clock_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_exitfunc_t {
    pub next: *mut _PDCLIB_exitfunc_t,
    pub func: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_status_t {
    pub base: libc::c_int,
    pub flags: _PDCLIB_int_fast32_t,
    pub n: _PDCLIB_size_t,
    pub i: _PDCLIB_size_t,
    pub current: _PDCLIB_size_t,
    pub s: *mut libc::c_char,
    pub width: _PDCLIB_size_t,
    pub prec: libc::c_int,
    pub stream: *mut _PDCLIB_file_t,
    pub arg: _PDCLIB_va_list,
}
extern "C" {
    pub fn _PDCLIB_atomax(s: *const libc::c_char) -> _PDCLIB_intmax_t;
}
extern "C" {
    pub fn _PDCLIB_strtox_prelim(
        p: *const libc::c_char,
        sign: *mut libc::c_char,
        base: *mut libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn _PDCLIB_strtox_main(
        p: *mut *const libc::c_char,
        base: libc::c_uint,
        error: _PDCLIB_uintmax_t,
        limval: _PDCLIB_uintmax_t,
        limdigit: libc::c_int,
        sign: *mut libc::c_char,
    ) -> _PDCLIB_uintmax_t;
}
extern "C" {
    pub static _PDCLIB_digits: [libc::c_char; 0usize];
}
extern "C" {
    pub static _PDCLIB_Xdigits: [libc::c_char; 0usize];
}
extern "C" {
    pub fn _PDCLIB_print(
        spec: *const libc::c_char,
        status: *mut _PDCLIB_status_t,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn _PDCLIB_scan(
        spec: *const libc::c_char,
        status: *mut _PDCLIB_status_t,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn _PDCLIB_filemode(mode: *const libc::c_char) -> libc::c_uint;
}
extern "C" {
    pub fn _PDCLIB_prepread(stream: *mut _PDCLIB_file_t) -> libc::c_int;
}
extern "C" {
    pub fn _PDCLIB_prepwrite(stream: *mut _PDCLIB_file_t) -> libc::c_int;
}
extern "C" {
    pub fn _PDCLIB_closeall();
}
extern "C" {
    pub fn _PDCLIB_is_leap(year_offset: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn _PDCLIB_load_lines(
        stream: *mut _PDCLIB_file_t,
        lines: _PDCLIB_size_t,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn _PDCLIB_getstream(stream: *mut _PDCLIB_file_t) -> libc::c_int;
}
extern "C" {
    pub fn _PDCLIB_setstream(stream: *mut _PDCLIB_file_t);
}
extern "C" {
    pub fn _PDCLIB_strtok(
        s1: *mut libc::c_char,
        s1max: *mut _PDCLIB_size_t,
        s2: *const libc::c_char,
        ptr: *mut *mut libc::c_char,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn _PDCLIB_errno_func() -> *mut libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_lconv_numeric_t {
    pub decimal_point: *mut libc::c_char,
    pub thousands_sep: *mut libc::c_char,
    pub grouping: *mut libc::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_lconv_monetary_t {
    pub mon_decimal_point: *mut libc::c_char,
    pub mon_thousands_sep: *mut libc::c_char,
    pub mon_grouping: *mut libc::c_char,
    pub positive_sign: *mut libc::c_char,
    pub negative_sign: *mut libc::c_char,
    pub currency_symbol: *mut libc::c_char,
    pub int_curr_symbol: *mut libc::c_char,
    pub frac_digits: libc::c_char,
    pub p_cs_precedes: libc::c_char,
    pub n_cs_precedes: libc::c_char,
    pub p_sep_by_space: libc::c_char,
    pub n_sep_by_space: libc::c_char,
    pub p_sign_posn: libc::c_char,
    pub n_sign_posn: libc::c_char,
    pub int_frac_digits: libc::c_char,
    pub int_p_cs_precedes: libc::c_char,
    pub int_n_cs_precedes: libc::c_char,
    pub int_p_sep_by_space: libc::c_char,
    pub int_n_sep_by_space: libc::c_char,
    pub int_p_sign_posn: libc::c_char,
    pub int_n_sign_posn: libc::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_numeric_monetary_t {
    pub lconv: *mut lconv,
    pub numeric_alloced: libc::c_int,
    pub monetary_alloced: libc::c_int,
}
extern "C" {
    pub static mut _PDCLIB_lc_numeric_monetary: _PDCLIB_lc_numeric_monetary_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_collate_t {
    pub alloced: libc::c_int,
}
extern "C" {
    pub static mut _PDCLIB_lc_collate: _PDCLIB_lc_collate_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_ctype_entry_t {
    pub flags: _PDCLIB_uint16_t,
    pub upper: libc::c_uchar,
    pub lower: libc::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_ctype_t {
    pub alloced: libc::c_int,
    pub digits_low: libc::c_int,
    pub digits_high: libc::c_int,
    pub Xdigits_low: libc::c_int,
    pub Xdigits_high: libc::c_int,
    pub xdigits_low: libc::c_int,
    pub xdigits_high: libc::c_int,
    pub entry: *mut _PDCLIB_lc_ctype_entry_t,
}
extern "C" {
    pub static mut _PDCLIB_lc_ctype: _PDCLIB_lc_ctype_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_messages_t {
    pub alloced: libc::c_int,
    pub errno_texts: [*mut libc::c_char; 141usize],
}
extern "C" {
    pub static mut _PDCLIB_lc_messages: _PDCLIB_lc_messages_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PDCLIB_lc_time_t {
    pub alloced: libc::c_int,
    pub month_name_abbr: [*mut libc::c_char; 12usize],
    pub month_name_full: [*mut libc::c_char; 12usize],
    pub day_name_abbr: [*mut libc::c_char; 7usize],
    pub day_name_full: [*mut libc::c_char; 7usize],
    pub date_time_format: *mut libc::c_char,
    pub time_format_12h: *mut libc::c_char,
    pub date_format: *mut libc::c_char,
    pub time_format: *mut libc::c_char,
    pub am_pm: [*mut libc::c_char; 2usize],
}
extern "C" {
    pub static mut _PDCLIB_lc_time: _PDCLIB_lc_time_t;
}
extern "C" {
    pub fn _PDCLIB_load_lc_numeric(
        path: *const libc::c_char,
        locale: *const libc::c_char,
    ) -> *mut _PDCLIB_lc_lconv_numeric_t;
}
extern "C" {
    pub fn _PDCLIB_load_lc_monetary(
        path: *const libc::c_char,
        locale: *const libc::c_char,
    ) -> *mut _PDCLIB_lc_lconv_monetary_t;
}
extern "C" {
    pub fn _PDCLIB_load_lc_collate(
        path: *const libc::c_char,
        locale: *const libc::c_char,
    ) -> *mut _PDCLIB_lc_collate_t;
}
extern "C" {
    pub fn _PDCLIB_load_lc_ctype(
        path: *const libc::c_char,
        locale: *const libc::c_char,
    ) -> *mut _PDCLIB_lc_ctype_t;
}
extern "C" {
    pub fn _PDCLIB_load_lc_time(
        path: *const libc::c_char,
        locale: *const libc::c_char,
    ) -> *mut _PDCLIB_lc_time_t;
}
extern "C" {
    pub fn _PDCLIB_load_lc_messages(
        path: *const libc::c_char,
        locale: *const libc::c_char,
    ) -> *mut _PDCLIB_lc_messages_t;
}
pub const _PDCLIB_assert_568: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = libc::c_int;
pub const _PDCLIB_assert_569: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = libc::c_int;
pub const _PDCLIB_assert_570: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = libc::c_int;
pub const _PDCLIB_assert_571: _bindgen_ty_4 = 1;
pub type _bindgen_ty_4 = libc::c_int;
pub const _PDCLIB_assert_574: _bindgen_ty_5 = 1;
pub type _bindgen_ty_5 = libc::c_int;
pub const _PDCLIB_assert_577: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = libc::c_int;
pub const _PDCLIB_assert_580: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = libc::c_int;
pub const _PDCLIB_assert_586: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = libc::c_int;
pub const _PDCLIB_assert_589: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = libc::c_int;
pub type fpos_t = _PDCLIB_fpos_t;
pub type FILE = _PDCLIB_file_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(filename: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn rename(oldpath: *const libc::c_char, newpath: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(s: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn fclose(stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fflush(stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fopen(filename: *const libc::c_char, mode: *const libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        filename: *const libc::c_char,
        mode: *const libc::c_char,
        stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(stream: *mut FILE, buf: *mut libc::c_char);
}
extern "C" {
    pub fn setvbuf(
        stream: *mut FILE,
        buf: *mut libc::c_char,
        mode: libc::c_int,
        size: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn fprintf(stream: *mut FILE, format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn fscanf(stream: *mut FILE, format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn printf(format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn scanf(format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn snprintf(
        s: *mut libc::c_char,
        n: libc::c_uint,
        format: *const libc::c_char,
        ...
    ) -> libc::c_int;
}
extern "C" {
    pub fn sprintf(s: *mut libc::c_char, format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn sscanf(s: *const libc::c_char, format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn vfprintf(
        stream: *mut FILE,
        format: *const libc::c_char,
        arg: __builtin_va_list,
    ) -> libc::c_int;
}
extern "C" {
    pub fn vfscanf(
        stream: *mut FILE,
        format: *const libc::c_char,
        arg: __builtin_va_list,
    ) -> libc::c_int;
}
extern "C" {
    pub fn vprintf(format: *const libc::c_char, arg: __builtin_va_list) -> libc::c_int;
}
extern "C" {
    pub fn vscanf(format: *const libc::c_char, arg: __builtin_va_list) -> libc::c_int;
}
extern "C" {
    pub fn vsnprintf(
        s: *mut libc::c_char,
        n: libc::c_uint,
        format: *const libc::c_char,
        arg: __builtin_va_list,
    ) -> libc::c_int;
}
extern "C" {
    pub fn vsprintf(
        s: *mut libc::c_char,
        format: *const libc::c_char,
        arg: __builtin_va_list,
    ) -> libc::c_int;
}
extern "C" {
    pub fn vsscanf(
        s: *const libc::c_char,
        format: *const libc::c_char,
        arg: __builtin_va_list,
    ) -> libc::c_int;
}
extern "C" {
    pub fn fgetc(stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fgets(s: *mut libc::c_char, n: libc::c_int, stream: *mut FILE) -> *mut libc::c_char;
}
extern "C" {
    pub fn fputc(c: libc::c_int, stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fputs(s: *const libc::c_char, stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn getc(stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn getchar() -> libc::c_int;
}
extern "C" {
    pub fn putc(c: libc::c_int, stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn putchar(c: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn puts(s: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn ungetc(c: libc::c_int, stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fread(
        ptr: *mut libc::c_void,
        size: libc::c_uint,
        nmemb: libc::c_uint,
        stream: *mut FILE,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn fwrite(
        ptr: *const libc::c_void,
        size: libc::c_uint,
        nmemb: libc::c_uint,
        stream: *mut FILE,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn fgetpos(stream: *mut FILE, pos: *mut fpos_t) -> libc::c_int;
}
extern "C" {
    pub fn fseek(stream: *mut FILE, offset: libc::c_long, whence: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn fsetpos(stream: *mut FILE, pos: *const fpos_t) -> libc::c_int;
}
extern "C" {
    pub fn ftell(stream: *mut FILE) -> libc::c_long;
}
extern "C" {
    pub fn rewind(stream: *mut FILE);
}
extern "C" {
    pub fn clearerr(stream: *mut FILE);
}
extern "C" {
    pub fn feof(stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn ferror(stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn perror(s: *const libc::c_char);
}
extern "C" {
    pub fn atof(nptr: *const libc::c_char) -> f64;
}
extern "C" {
    pub fn strtod(nptr: *const libc::c_char, endptr: *mut *mut libc::c_char) -> f64;
}
extern "C" {
    pub fn strtof(nptr: *const libc::c_char, endptr: *mut *mut libc::c_char) -> f32;
}
extern "C" {
    pub fn strtold(nptr: *const libc::c_char, endptr: *mut *mut libc::c_char) -> f64;
}
extern "C" {
    pub fn strtol(
        nptr: *const libc::c_char,
        endptr: *mut *mut libc::c_char,
        base: libc::c_int,
    ) -> libc::c_long;
}
extern "C" {
    pub fn strtoll(
        nptr: *const libc::c_char,
        endptr: *mut *mut libc::c_char,
        base: libc::c_int,
    ) -> libc::c_longlong;
}
extern "C" {
    pub fn strtoul(
        nptr: *const libc::c_char,
        endptr: *mut *mut libc::c_char,
        base: libc::c_int,
    ) -> libc::c_ulong;
}
extern "C" {
    pub fn strtoull(
        nptr: *const libc::c_char,
        endptr: *mut *mut libc::c_char,
        base: libc::c_int,
    ) -> libc::c_ulonglong;
}
extern "C" {
    pub fn atoi(nptr: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn atol(nptr: *const libc::c_char) -> libc::c_long;
}
extern "C" {
    pub fn atoll(nptr: *const libc::c_char) -> libc::c_longlong;
}
extern "C" {
    pub static mut _PDCLIB_seed: libc::c_ulong;
}
extern "C" {
    pub fn rand() -> libc::c_int;
}
extern "C" {
    pub fn srand(seed: libc::c_uint);
}
extern "C" {
    pub fn malloc(size: libc::c_uint) -> *mut libc::c_void;
}
extern "C" {
    pub fn calloc(nmemb: libc::c_uint, size: libc::c_uint) -> *mut libc::c_void;
}
extern "C" {
    pub fn aligned_alloc(alignment: libc::c_uint, size: libc::c_uint) -> *mut libc::c_void;
}
extern "C" {
    pub fn free(ptr: *mut libc::c_void);
}
extern "C" {
    pub fn realloc(ptr: *mut libc::c_void, size: libc::c_uint) -> *mut libc::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn at_quick_exit(func: ::core::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
}
extern "C" {
    pub fn atexit(func: ::core::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
}
extern "C" {
    pub fn exit(status: libc::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(status: libc::c_int);
}
extern "C" {
    pub fn _Exit(status: libc::c_int) -> !;
}
extern "C" {
    pub fn getenv(name: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn system(string: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn bsearch(
        key: *const libc::c_void,
        base: *const libc::c_void,
        nmemb: usize,
        size: usize,
        compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const libc::c_void,
                arg2: *const libc::c_void,
            ) -> libc::c_int,
        >,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn qsort(
        base: *mut libc::c_void,
        nmemb: usize,
        size: usize,
        compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const libc::c_void,
                arg2: *const libc::c_void,
            ) -> libc::c_int,
        >,
    );
}
extern "C" {
    pub fn abs(j: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn labs(j: libc::c_long) -> libc::c_long;
}
extern "C" {
    pub fn llabs(j: libc::c_longlong) -> libc::c_longlong;
}
pub type div_t = _PDCLIB_div_t;
pub type ldiv_t = _PDCLIB_ldiv_t;
pub type lldiv_t = _PDCLIB_lldiv_t;
extern "C" {
    pub fn div(numer: libc::c_int, denom: libc::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(numer: libc::c_long, denom: libc::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(numer: libc::c_longlong, denom: libc::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn _byteswap_ushort(val: libc::c_ushort) -> libc::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(val: libc::c_ulong) -> libc::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(val: libc::c_ulonglong) -> libc::c_ulonglong;
}
pub type _purecall_handler = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_purecall_handler(function: _purecall_handler) -> _purecall_handler;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = _PDCLIB_int_fast8_t;
pub type int_fast16_t = _PDCLIB_int_fast16_t;
pub type int_fast32_t = _PDCLIB_int_fast32_t;
pub type int_fast64_t = _PDCLIB_int_fast64_t;
pub type uint_fast8_t = _PDCLIB_uint_fast8_t;
pub type uint_fast16_t = _PDCLIB_uint_fast16_t;
pub type uint_fast32_t = _PDCLIB_uint_fast32_t;
pub type uint_fast64_t = _PDCLIB_uint_fast64_t;
pub type intmax_t = _PDCLIB_intmax_t;
pub type uintmax_t = _PDCLIB_uintmax_t;
pub type wchar_t = _PDCLIB_wchar_t;
pub type wint_t = _PDCLIB_wint_t;
pub type wctrans_t = libc::c_int;
pub type wctype_t = libc::c_int;
extern "C" {
    pub fn iswalnum(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswalpha(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswblank(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswcntrl(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswdigit(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswgraph(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswlower(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswprint(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswpunct(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswspace(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswupper(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswxdigit(wc: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn iswctype(wc: wint_t, desc: wctype_t) -> libc::c_int;
}
extern "C" {
    pub fn wctype(property: *const libc::c_char) -> wctype_t;
}
extern "C" {
    pub fn towlower(wc: wint_t) -> wint_t;
}
extern "C" {
    pub fn towupper(wc: wint_t) -> wint_t;
}
extern "C" {
    pub fn towctrans(wc: wint_t, desc: wctrans_t) -> wint_t;
}
extern "C" {
    pub fn wctrans(property: *const libc::c_char) -> wctrans_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XBOXRT_mbstate {
    pub __bindgen_anon_1: XBOXRT_mbstate__bindgen_ty_1,
    pub _Surrogate: u16,
    pub _PendState: libc::c_uchar,
    pub _PendChar: libc::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XBOXRT_mbstate__bindgen_ty_1 {
    pub _St64: [u64; 15usize],
    pub _St32: [u32; 31usize],
    pub _St16: [u16; 62usize],
    pub _StUC: [libc::c_uchar; 124usize],
    pub _StSC: [libc::c_schar; 124usize],
    pub _StC: [libc::c_char; 124usize],
}
pub type XBOXRT_mbstate_t = XBOXRT_mbstate;
pub type mbstate_t = XBOXRT_mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    _unused: [u8; 0],
}
extern "C" {
    pub fn wcscpy(s1: *mut wchar_t, s2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncpy(s1: *mut wchar_t, s2: *const wchar_t, n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wmemcpy(
        s1: *mut libc::c_ushort,
        s2: *const libc::c_ushort,
        n: libc::c_uint,
    ) -> *mut libc::c_ushort;
}
extern "C" {
    pub fn wmemmove(
        s1: *mut libc::c_ushort,
        s2: *const libc::c_ushort,
        n: libc::c_uint,
    ) -> *mut libc::c_ushort;
}
extern "C" {
    pub fn wcscat(s1: *mut wchar_t, s2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncat(s1: *mut wchar_t, s2: *const wchar_t, n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(s1: *const libc::c_ushort, s2: *const libc::c_ushort) -> libc::c_int;
}
extern "C" {
    pub fn wcscoll(s1: *const wchar_t, s2: *const wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn wcsncmp(
        s1: *const libc::c_ushort,
        s2: *const libc::c_ushort,
        n: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn wcsxfrm(s1: *mut wchar_t, s2: *const wchar_t, n: usize) -> usize;
}
extern "C" {
    pub fn wmemcmp(
        s1: *const libc::c_ushort,
        s2: *const libc::c_ushort,
        n: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn wcschr(s: *const libc::c_ushort, c: libc::c_ushort) -> *mut libc::c_ushort;
}
extern "C" {
    pub fn wcscspn(s1: *const wchar_t, s2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcspbrk(s1: *const wchar_t, s2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(s: *const wchar_t, c: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(s1: *const wchar_t, s2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsstr(s1: *const wchar_t, s2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(s1: *mut wchar_t, s2: *const wchar_t, ptr: *mut *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wmemchr(
        s: *const libc::c_ushort,
        c: libc::c_ushort,
        n: libc::c_uint,
    ) -> *mut libc::c_ushort;
}
extern "C" {
    pub fn wcslen(s: *const libc::c_ushort) -> libc::c_uint;
}
extern "C" {
    pub fn mbsinit(ps: *const mbstate_t) -> libc::c_int;
}
extern "C" {
    pub fn mbrtowc(
        pwc: *mut wchar_t,
        s: *const libc::c_char,
        n: usize,
        ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcrtomb(s: *mut libc::c_char, wc: wchar_t, ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wmemset(wcs: *mut wchar_t, wc: wchar_t, n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(nptr: *const wchar_t, endptr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstof(nptr: *const wchar_t, endptr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(nptr: *const wchar_t, endptr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstol(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: libc::c_int,
    ) -> libc::c_long;
}
extern "C" {
    pub fn wcstoll(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: libc::c_int,
    ) -> libc::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: libc::c_int,
    ) -> libc::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: libc::c_int,
    ) -> libc::c_ulonglong;
}
extern "C" {
    pub fn mbrlen(s: *const libc::c_char, n: usize, ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn btowc(c: libc::c_int) -> wint_t;
}
extern "C" {
    pub fn mbsrtowcs(
        dest: *mut wchar_t,
        src: *mut *const libc::c_char,
        len: usize,
        ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wctob(c: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn wcrtomb_s(
        retval: *mut usize,
        s: *mut libc::c_char,
        ssz: usize,
        wc: wchar_t,
        ps: *mut mbstate_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn _snwprintf(
        buffer: *mut wchar_t,
        count: usize,
        format: *const wchar_t,
        ...
    ) -> libc::c_int;
}
extern "C" {
    pub fn mbtowc(pwc: *mut wchar_t, string: *const libc::c_char, n: usize) -> libc::c_int;
}
extern "C" {
    pub fn memcpy(
        s1: *mut libc::c_void,
        s2: *const libc::c_void,
        n: libc::c_uint,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn memmove(
        s1: *mut libc::c_void,
        s2: *const libc::c_void,
        n: libc::c_uint,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn strcpy(s1: *mut libc::c_char, s2: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strncpy(
        s1: *mut libc::c_char,
        s2: *const libc::c_char,
        n: libc::c_uint,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn strcat(s1: *mut libc::c_char, s2: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strncat(
        s1: *mut libc::c_char,
        s2: *const libc::c_char,
        n: libc::c_uint,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn memcmp(s1: *const libc::c_void, s2: *const libc::c_void, n: libc::c_uint)
        -> libc::c_int;
}
extern "C" {
    pub fn strcmp(s1: *const libc::c_char, s2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn strcoll(s1: *const libc::c_char, s2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn strncmp(
        s1: *const libc::c_char,
        s2: *const libc::c_char,
        n: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn strxfrm(s1: *mut libc::c_char, s2: *const libc::c_char, n: libc::c_uint)
        -> libc::c_uint;
}
extern "C" {
    pub fn memchr(s: *const libc::c_void, c: libc::c_int, n: libc::c_uint) -> *mut libc::c_void;
}
extern "C" {
    pub fn strchr(s: *const libc::c_char, c: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn strcspn(s1: *const libc::c_char, s2: *const libc::c_char) -> libc::c_uint;
}
extern "C" {
    pub fn strpbrk(s1: *const libc::c_char, s2: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strrchr(s: *const libc::c_char, c: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn strspn(s1: *const libc::c_char, s2: *const libc::c_char) -> libc::c_uint;
}
extern "C" {
    pub fn strstr(s1: *const libc::c_char, s2: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strtok(s1: *mut libc::c_char, s2: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn memset(s: *mut libc::c_void, c: libc::c_int, n: libc::c_uint) -> *mut libc::c_void;
}
extern "C" {
    pub fn strerror(errnum: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn strlen(s: *const libc::c_char) -> libc::c_uint;
}
extern "C" {
    pub fn strdup(s: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn _strnicmp(s1: *const libc::c_char, s2: *const libc::c_char, n: usize) -> libc::c_int;
}
extern "C" {
    pub fn _stricmp(s1: *const libc::c_char, s2: *const libc::c_char) -> libc::c_int;
}
pub type CONN_FUNC =
    ::core::option::Option<unsafe extern "C" fn(udev: *mut udev_t, param: libc::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct line_coding_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdc_dev_t {
    _unused: [u8; 0],
}
pub type CDC_CB_FUNC = ::core::option::Option<
    unsafe extern "C" fn(cdev: *mut cdc_dev_t, rdata: *mut u8, data_len: libc::c_int),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usbhid_dev {
    _unused: [u8; 0],
}
pub type HID_IR_FUNC = ::core::option::Option<
    unsafe extern "C" fn(
        hdev: *mut usbhid_dev,
        ep_addr: u16,
        status: libc::c_int,
        rdata: *mut u8,
        data_len: u32,
    ),
>;
pub type HID_IW_FUNC = ::core::option::Option<
    unsafe extern "C" fn(
        hdev: *mut usbhid_dev,
        ep_addr: u16,
        status: libc::c_int,
        wbuff: *mut u8,
        data_len: *mut u32,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uac_dev_t {
    _unused: [u8; 0],
}
pub type UAC_CB_FUNC = ::core::option::Option<
    unsafe extern "C" fn(dev: *mut uac_dev_t, data: *mut u8, len: libc::c_int) -> libc::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uvc_dev_t {
    _unused: [u8; 0],
}
pub type UVC_CB_FUNC = ::core::option::Option<
    unsafe extern "C" fn(dev: *mut uvc_dev_t, data: *mut u8, len: libc::c_int) -> libc::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msc_dev_t {
    _unused: [u8; 0],
}
pub const image_format_e_UVC_FORMAT_INVALID: image_format_e = 0;
pub const image_format_e_UVC_FORMAT_YUY2: image_format_e = 1;
pub const image_format_e_UVC_FORMAT_NV12: image_format_e = 2;
pub const image_format_e_UVC_FORMAT_M420: image_format_e = 3;
pub const image_format_e_UVC_FORMAT_I420: image_format_e = 4;
pub const image_format_e_UVC_FORMAT_MJPEG: image_format_e = 11;
pub type image_format_e = libc::c_int;
pub use self::image_format_e as IMAGE_FORMAT_E;
extern "C" {
    #[doc = " @addtogroup N9H30_USBH_EXPORTED_FUNCTIONS USB Host Exported Functions\n@{"]
    pub fn usbh_ohci_irq_init();
}
extern "C" {
    pub fn usbh_ohci_irq_deinit();
}
extern "C" {
    pub fn usbh_ehci_irq_init();
}
extern "C" {
    pub fn usbh_ehci_irq_deinit();
}
extern "C" {
    pub fn usbh_allocate_memory_pool(size: u32, boundary: u32) -> *mut libc::c_void;
}
extern "C" {
    pub fn usbh_free_memory_pool(memory_pool: *mut libc::c_void) -> *mut libc::c_void;
}
extern "C" {
    pub fn usbh_get_ticks() -> u32;
}
extern "C" {
    pub fn usbh_delay_us(usec: libc::c_int);
}
extern "C" {
    pub fn usbh_dma_to_virt(physical_address: *mut libc::c_void) -> *mut libc::c_void;
}
extern "C" {
    pub fn usbh_virt_to_dma(virtual_address: *mut libc::c_void) -> *mut libc::c_void;
}
extern "C" {
    pub fn usbh_sysprintf(format: *const libc::c_char, ...);
}
extern "C" {
    pub fn usbh_core_init();
}
extern "C" {
    pub fn usbh_core_deinit();
}
extern "C" {
    pub fn usbh_pooling_hubs() -> libc::c_int;
}
extern "C" {
    pub fn usbh_install_conn_callback(conn_func: CONN_FUNC, disconn_func: CONN_FUNC);
}
extern "C" {
    pub fn usbh_suspend();
}
extern "C" {
    pub fn usbh_resume();
}
extern "C" {
    pub fn usbh_find_device(hub_id: *mut libc::c_char, port: libc::c_int) -> *mut udev_t;
}
extern "C" {
    pub fn get_ticks() -> u32;
}
pub type CDC_CONN_FUNC =
    ::core::option::Option<unsafe extern "C" fn(cdev: *mut cdc_dev_t, param: libc::c_int)>;
extern "C" {
    pub fn usbh_cdc_init();
}
extern "C" {
    pub fn usbh_cdc_get_device_list() -> *mut cdc_dev_t;
}
extern "C" {
    #[doc = " @cond HIDDEN_SYMBOLS"]
    pub fn usbh_cdc_get_line_coding(cdev: *mut cdc_dev_t, line_code: *mut line_coding_t) -> i32;
}
extern "C" {
    pub fn usbh_cdc_set_line_coding(cdev: *mut cdc_dev_t, line_code: *mut line_coding_t) -> i32;
}
extern "C" {
    #[doc = " @endcond HIDDEN_SYMBOLS"]
    pub fn usbh_cdc_set_control_line_state(
        cdev: *mut cdc_dev_t,
        active_carrier: libc::c_int,
        DTE_present: libc::c_int,
    ) -> i32;
}
extern "C" {
    pub fn usbh_cdc_start_polling_status(cdev: *mut cdc_dev_t, func: CDC_CB_FUNC) -> i32;
}
extern "C" {
    pub fn usbh_cdc_start_to_receive_data(cdev: *mut cdc_dev_t, func: CDC_CB_FUNC) -> i32;
}
extern "C" {
    pub fn usbh_cdc_send_data(cdev: *mut cdc_dev_t, buff: *mut u8, buff_len: libc::c_int) -> i32;
}
extern "C" {
    pub fn usbh_install_cdc_conn_callback(conn_func: CDC_CONN_FUNC, disconn_func: CDC_CONN_FUNC);
}
pub type HID_CONN_FUNC =
    ::core::option::Option<unsafe extern "C" fn(udev: *mut usbhid_dev, param: libc::c_int)>;
extern "C" {
    pub fn usbh_hid_init();
}
extern "C" {
    pub fn usbh_hid_get_device_list() -> *mut usbhid_dev;
}
extern "C" {
    pub fn usbh_hid_get_report_descriptor(
        hdev: *mut usbhid_dev,
        desc_buf: *mut u8,
        buf_max_len: libc::c_int,
    ) -> i32;
}
extern "C" {
    pub fn usbh_hid_get_report(
        hdev: *mut usbhid_dev,
        rtp_typ: libc::c_int,
        rtp_id: libc::c_int,
        data: *mut u8,
        len: libc::c_int,
    ) -> i32;
}
extern "C" {
    pub fn usbh_hid_set_report(
        hdev: *mut usbhid_dev,
        rtp_typ: libc::c_int,
        rtp_id: libc::c_int,
        data: *mut u8,
        len: libc::c_int,
    ) -> i32;
}
extern "C" {
    pub fn usbh_hid_get_idle(hdev: *mut usbhid_dev, rtp_id: libc::c_int, idle_rate: *mut u8)
        -> i32;
}
extern "C" {
    pub fn usbh_hid_set_idle(hdev: *mut usbhid_dev, rtp_id: libc::c_int, idle_rate: u8) -> i32;
}
extern "C" {
    pub fn usbh_hid_get_protocol(hdev: *mut usbhid_dev, protocol: *mut u8) -> i32;
}
extern "C" {
    pub fn usbh_hid_set_protocol(hdev: *mut usbhid_dev, protocol: u8) -> i32;
}
extern "C" {
    pub fn usbh_hid_start_int_read(hdev: *mut usbhid_dev, ep_addr: u8, func: HID_IR_FUNC) -> i32;
}
extern "C" {
    pub fn usbh_hid_stop_int_read(hdev: *mut usbhid_dev, ep_addr: u8) -> i32;
}
extern "C" {
    pub fn usbh_hid_start_int_write(hdev: *mut usbhid_dev, ep_addr: u8, func: HID_IW_FUNC) -> i32;
}
extern "C" {
    pub fn usbh_hid_stop_int_write(hdev: *mut usbhid_dev, ep_addr: u8) -> i32;
}
extern "C" {
    pub fn usbh_hid_int_write(
        hdev: *mut usbhid_dev,
        ep_addr: u8,
        buff: *mut u8,
        len: u32,
        callback: *mut libc::c_void,
    ) -> i32;
}
extern "C" {
    pub fn usbh_install_hid_conn_callback(conn_func: HID_CONN_FUNC, disconn_func: HID_CONN_FUNC);
}
pub type MSC_CONN_FUNC =
    ::core::option::Option<unsafe extern "C" fn(msc: *mut msc_dev_t, param: libc::c_int)>;
extern "C" {
    pub fn usbh_umas_init() -> libc::c_int;
}
extern "C" {
    pub fn usbh_msc_get_device_list() -> *mut msc_dev_t;
}
extern "C" {
    pub fn usbh_umas_read(
        msc: *mut msc_dev_t,
        sec_no: u32,
        sec_cnt: libc::c_int,
        buff: *mut u8,
    ) -> libc::c_int;
}
extern "C" {
    pub fn usbh_umas_write(
        msc: *mut msc_dev_t,
        sec_no: u32,
        sec_cnt: libc::c_int,
        buff: *mut u8,
    ) -> libc::c_int;
}
extern "C" {
    pub fn usbh_umas_reset_disk(msc: *mut msc_dev_t) -> libc::c_int;
}
extern "C" {
    pub fn usbh_install_msc_conn_callback(conn_func: MSC_CONN_FUNC, disconn_func: MSC_CONN_FUNC);
}
pub type UAC_CONN_FUNC =
    ::core::option::Option<unsafe extern "C" fn(audev: *mut uac_dev_t, param: libc::c_int)>;
extern "C" {
    pub fn usbh_uac_init();
}
extern "C" {
    pub fn usbh_uac_open(audev: *mut uac_dev_t) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uac_get_device_list() -> *mut uac_dev_t;
}
extern "C" {
    pub fn usbh_uac_get_channel_number(audev: *mut uac_dev_t, target: u8) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uac_get_bit_resolution(
        audev: *mut uac_dev_t,
        target: u8,
        byte_cnt: *mut u8,
    ) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uac_get_sampling_rate(
        audev: *mut uac_dev_t,
        target: u8,
        srate_list: *mut u32,
        max_cnt: libc::c_int,
        type_: *mut u8,
    ) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uac_sampling_rate_control(
        audev: *mut uac_dev_t,
        target: u8,
        req: u8,
        srate: *mut u32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uac_mute_control(
        audev: *mut uac_dev_t,
        target: u8,
        req: u8,
        chn: u16,
        mute: *mut u8,
    ) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uac_vol_control(
        audev: *mut uac_dev_t,
        target: u8,
        req: u8,
        chn: u16,
        volume: *mut u16,
    ) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uac_auto_gain_control(
        audev: *mut uac_dev_t,
        target: u8,
        req: u8,
        chn: u16,
        bAGC: *mut u8,
    ) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uac_start_audio_in(uac: *mut uac_dev_t, func: UAC_CB_FUNC) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uac_stop_audio_in(audev: *mut uac_dev_t) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uac_start_audio_out(uac: *mut uac_dev_t, func: UAC_CB_FUNC) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uac_stop_audio_out(audev: *mut uac_dev_t) -> libc::c_int;
}
extern "C" {
    pub fn usbh_install_uac_conn_callback(conn_func: UAC_CONN_FUNC, disconn_func: UAC_CONN_FUNC);
}
pub type UVC_CONN_FUNC =
    ::core::option::Option<unsafe extern "C" fn(vdev: *mut uvc_dev_t, param: libc::c_int)>;
extern "C" {
    pub fn usbh_uvc_init();
}
extern "C" {
    pub fn usbh_uvc_get_device_list() -> *mut uvc_dev_t;
}
extern "C" {
    pub fn usbh_get_video_format(
        vdev: *mut uvc_dev_t,
        index: libc::c_int,
        format: *mut IMAGE_FORMAT_E,
        width: *mut libc::c_int,
        height: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn usbh_set_video_format(
        vdev: *mut uvc_dev_t,
        format: IMAGE_FORMAT_E,
        width: libc::c_int,
        height: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uvc_set_video_buffer(
        vdev: *mut uvc_dev_t,
        image_buff: *mut u8,
        img_buff_size: libc::c_int,
    );
}
extern "C" {
    pub fn usbh_uvc_start_streaming(vdev: *mut uvc_dev_t, func: UVC_CB_FUNC) -> libc::c_int;
}
extern "C" {
    pub fn usbh_uvc_stop_streaming(vdev: *mut uvc_dev_t) -> libc::c_int;
}
extern "C" {
    pub fn usbh_install_uvc_conn_callback(conn_func: UVC_CONN_FUNC, disconn_func: UVC_CONN_FUNC);
}
extern "C" {
    #[doc = " @cond HIDDEN_SYMBOLS"]
    pub fn dump_ohci_regs();
}
extern "C" {
    pub fn dump_ehci_regs();
}
extern "C" {
    pub fn dump_ohci_ports();
}
extern "C" {
    pub fn dump_ehci_ports();
}
extern "C" {
    pub fn usbh_memory_used() -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qTD_t {
    pub Next_qTD: u32,
    pub Alt_Next_qTD: u32,
    pub Token: u32,
    pub Bptr: [u32; 5usize],
    pub utr: *mut utr_t,
    pub xfer_len: u32,
    pub qh: *mut qh_t,
    pub next: *mut qTD_t,
}
pub type qTD_T = qTD_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qh_t {
    pub HLink: u32,
    pub Chrst: u32,
    pub Cap: u32,
    pub Curr_qTD: u32,
    pub OL_Next_qTD: u32,
    pub OL_Alt_Next_qTD: u32,
    pub OL_Token: u32,
    pub OL_Bptr: [u32; 5usize],
    pub qtd_list: *mut qTD_T,
    pub done_list: *mut qTD_T,
    pub next: *mut qh_t,
}
pub type QH_T = qh_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itd_t {
    pub Next_Link: u32,
    pub Transaction: [u32; 8usize],
    pub Bptr: [u32; 7usize],
    pub iso_ep: *mut iso_ep_t,
    pub utr: *mut utr_t,
    pub buff_base: u32,
    pub fidx: u8,
    pub trans_mask: u8,
    pub sched_frnidx: u32,
    pub next: *mut itd_t,
}
pub type iTD_T = itd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sitd_t {
    pub Next_Link: u32,
    pub Chrst: u32,
    pub Sched: u32,
    pub StsCtrl: u32,
    pub Bptr: [u32; 2usize],
    pub BackLink: u32,
    pub iso_ep: *mut iso_ep_t,
    pub utr: *mut utr_t,
    pub fidx: u8,
    pub sched_frnidx: u32,
    pub next: *mut sitd_t,
}
pub type siTD_T = sitd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iso_ep_t {
    pub ep: *mut ep_info_t,
    pub next_frame: u32,
    pub itd_list: *mut iTD_T,
    pub itd_done_list: *mut iTD_T,
    pub sitd_list: *mut siTD_T,
    pub sitd_done_list: *mut siTD_T,
    pub next: *mut iso_ep_t,
}
pub type ISO_EP_T = iso_ep_t;
extern "C" {
    pub fn scan_isochronous_list();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ed_t {
    pub Info: u32,
    pub TailP: u32,
    pub HeadP: u32,
    pub NextED: u32,
    pub bInterval: u8,
    pub next_sf: u16,
    pub next: *mut ed_t,
}
pub type ED_T = ed_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct td_t {
    pub Info: u32,
    pub CBP: u32,
    pub NextTD: u32,
    pub BE: u32,
    pub PSW: [u32; 4usize],
    pub buff_start: u32,
    pub ed: *mut ED_T,
    pub utr: *mut utr_t,
    pub next: *mut td_t,
}
pub type TD_T = td_t;
pub const OCHI_CC_CODE_CC_NOERROR: OCHI_CC_CODE = 0;
pub const OCHI_CC_CODE_CC_CRC: OCHI_CC_CODE = 1;
pub const OCHI_CC_CODE_CC_BITSTUFF: OCHI_CC_CODE = 2;
pub const OCHI_CC_CODE_CC_DATA_TOGGLE: OCHI_CC_CODE = 3;
pub const OCHI_CC_CODE_CC_STALL: OCHI_CC_CODE = 4;
pub const OCHI_CC_CODE_CC_NOTRESPONSE: OCHI_CC_CODE = 5;
pub const OCHI_CC_CODE_CC_PID_CHECK: OCHI_CC_CODE = 6;
pub const OCHI_CC_CODE_CC_UNEXPECTED_PID: OCHI_CC_CODE = 7;
pub const OCHI_CC_CODE_CC_DATA_OVERRUN: OCHI_CC_CODE = 8;
pub const OCHI_CC_CODE_CC_DATA_UNDERRUN: OCHI_CC_CODE = 9;
pub const OCHI_CC_CODE_CC_RESERVED1: OCHI_CC_CODE = 10;
pub const OCHI_CC_CODE_CC_RESERVED2: OCHI_CC_CODE = 11;
pub const OCHI_CC_CODE_CC_BUFFER_OVERRUN: OCHI_CC_CODE = 12;
pub const OCHI_CC_CODE_CC_BUFFER_UNDERRUN: OCHI_CC_CODE = 13;
pub const OCHI_CC_CODE_CC_NOT_ACCESS: OCHI_CC_CODE = 14;
pub type OCHI_CC_CODE = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HCCA_T {
    pub int_table: [u32; 32usize],
    pub frame_no: u16,
    pub pad1: u16,
    pub done_head: u32,
    pub reserved_for_hc: [u8; 116usize],
}
#[doc = "@addtogroup USBH USB Host Controller(USBH)\nMemory Mapped Structure for USBH Controller\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USBH_T {
    #[doc = "< [0x0000] Host Controller Revision Register"]
    pub HcRevision: u32,
    #[doc = "< [0x0004] Host Controller Control Register"]
    pub HcControl: u32,
    #[doc = "< [0x0008] Host Controller Command Status Register"]
    pub HcCommandStatus: u32,
    #[doc = "< [0x000c] Host Controller Interrupt Status Register"]
    pub HcInterruptStatus: u32,
    #[doc = "< [0x0010] Host Controller Interrupt Enable Register"]
    pub HcInterruptEnable: u32,
    #[doc = "< [0x0014] Host Controller Interrupt Disable Register"]
    pub HcInterruptDisable: u32,
    #[doc = "< [0x0018] Host Controller Communication Area Register"]
    pub HcHCCA: u32,
    #[doc = "< [0x001c] Host Controller Period Current ED Register"]
    pub HcPeriodCurrentED: u32,
    #[doc = "< [0x0020] Host Controller Control Head ED Register"]
    pub HcControlHeadED: u32,
    #[doc = "< [0x0024] Host Controller Control Current ED Register"]
    pub HcControlCurrentED: u32,
    #[doc = "< [0x0028] Host Controller Bulk Head ED Register"]
    pub HcBulkHeadED: u32,
    #[doc = "< [0x002c] Host Controller Bulk Current ED Register"]
    pub HcBulkCurrentED: u32,
    #[doc = "< [0x0030] Host Controller Done Head Register"]
    pub HcDoneHead: u32,
    #[doc = "< [0x0034] Host Controller Frame Interval Register"]
    pub HcFmInterval: u32,
    #[doc = "< [0x0038] Host Controller Frame Remaining Register"]
    pub HcFmRemaining: u32,
    #[doc = "< [0x003c] Host Controller Frame Number Register"]
    pub HcFmNumber: u32,
    #[doc = "< [0x0040] Host Controller Periodic Start Register"]
    pub HcPeriodicStart: u32,
    #[doc = "< [0x0044] Host Controller Low-speed Threshold Register"]
    pub HcLSThreshold: u32,
    #[doc = "< [0x0048] Host Controller Root Hub Descriptor A Register"]
    pub HcRhDescriptorA: u32,
    #[doc = "< [0x004c] Host Controller Root Hub Descriptor B Register"]
    pub HcRhDescriptorB: u32,
    #[doc = "< [0x0050] Host Controller Root Hub Status Register"]
    pub HcRhStatus: u32,
    #[doc = "< [0x0054] Host Controller Root Hub Port Status [1]"]
    pub HcRhPortStatus: [u32; 4usize],
    pub RESERVE0: [u32; 105usize],
    #[doc = "< [0x0200] Host Controller PHY Control Register"]
    pub HcPhyControl: u32,
    #[doc = "< [0x0204] Host Controller Miscellaneous Control Register"]
    pub HcMiscControl: u32,
}
#[doc = "@addtogroup HSUSBH High Speed USB Host Controller (HSUSBH)\nMemory Mapped Structure for HSUSBH Controller\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSUSBH_T {
    #[doc = "< [0x0000] EHCI Version Number Register"]
    pub EHCVNR: u32,
    #[doc = "< [0x0004] EHCI Structural Parameters Register"]
    pub EHCSPR: u32,
    #[doc = "< [0x0008] EHCI Capability Parameters Register"]
    pub EHCCPR: u32,
    pub RESERVE0: [u32; 5usize],
    #[doc = "< [0x0020] USB Command Register"]
    pub UCMDR: u32,
    #[doc = "< [0x0024] USB Status Register"]
    pub USTSR: u32,
    #[doc = "< [0x0028] USB Interrupt Enable Register"]
    pub UIENR: u32,
    #[doc = "< [0x002c] USB Frame Index Register"]
    pub UFINDR: u32,
    pub RESERVE1: [u32; 1usize],
    #[doc = "< [0x0034] USB Periodic Frame List Base Address Register"]
    pub UPFLBAR: u32,
    #[doc = "< [0x0038] USB Current Asynchronous List Address Register"]
    pub UCALAR: u32,
    #[doc = "< [0x003c] USB Asynchronous Schedule Sleep Timer Register"]
    pub UASSTR: u32,
    pub RESERVE2: [u32; 8usize],
    #[doc = "< [0x0060] USB Configure Flag Register"]
    pub UCFGR: u32,
    #[doc = "< [0x0064] ~ [0x0068] USB Port 0 & 1 Status and Control Register"]
    pub UPSCR: [u32; 2usize],
    pub RESERVE3: [u32; 22usize],
    #[doc = "< [0x00c4] USB PHY 0 Control Register"]
    pub USBPCR0: u32,
    #[doc = "< [0x00c8] USB PHY 1 Control Register"]
    pub USBPCR1: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hub_dev_t {
    _unused: [u8; 0],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DEV_REQ_T {
    pub bmRequestType: u8,
    pub bRequest: u8,
    pub wValue: u16,
    pub wIndex: u16,
    pub wLength: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DESC_HDR_T {
    pub bLength: u8,
    pub bDescriptorType: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DESC_DEV_T {
    #[doc = "< Length of device descriptor"]
    pub bLength: u8,
    #[doc = "< Device descriptor type"]
    pub bDescriptorType: u8,
    #[doc = "< USB version number"]
    pub bcdUSB: u16,
    #[doc = "< Device class code"]
    pub bDeviceClass: u8,
    #[doc = "< Device subclass code"]
    pub bDeviceSubClass: u8,
    #[doc = "< Device protocol code"]
    pub bDeviceProtocol: u8,
    #[doc = "< Maximum packet size of control endpoint"]
    pub bMaxPacketSize0: u8,
    #[doc = "< Vendor ID"]
    pub idVendor: u16,
    #[doc = "< Product ID"]
    pub idProduct: u16,
    #[doc = "< Device ID"]
    pub bcdDevice: u16,
    #[doc = "< Manufacture description string ID"]
    pub iManufacturer: u8,
    #[doc = "< Product description string ID"]
    pub iProduct: u8,
    #[doc = "< Serial number description string ID"]
    pub iSerialNumber: u8,
    #[doc = "< Total number of configurations"]
    pub bNumConfigurations: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_config_descriptor {
    #[doc = "< Length of configuration descriptor"]
    pub bLength: u8,
    #[doc = "< Descriptor type"]
    pub bDescriptorType: u8,
    #[doc = "< Total length of this configuration"]
    pub wTotalLength: u16,
    #[doc = "< Total number of interfaces"]
    pub bNumInterfaces: u8,
    #[doc = "< Configuration descriptor number"]
    pub bConfigurationValue: u8,
    #[doc = "< String descriptor ID"]
    pub iConfiguration: u8,
    #[doc = "< Configuration characteristics"]
    pub bmAttributes: u8,
    #[doc = "< Maximum power consumption"]
    pub MaxPower: u8,
}
pub type DESC_CONF_T = usb_config_descriptor;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_interface_descriptor {
    #[doc = "< Length of interface descriptor"]
    pub bLength: u8,
    #[doc = "< Descriptor type"]
    pub bDescriptorType: u8,
    #[doc = "< Interface number"]
    pub bInterfaceNumber: u8,
    #[doc = "< Alternate setting number"]
    pub bAlternateSetting: u8,
    #[doc = "< Number of endpoints"]
    pub bNumEndpoints: u8,
    #[doc = "< Interface class code"]
    pub bInterfaceClass: u8,
    #[doc = "< Interface subclass code"]
    pub bInterfaceSubClass: u8,
    #[doc = "< Interface protocol code"]
    pub bInterfaceProtocol: u8,
    #[doc = "< Interface ID"]
    pub iInterface: u8,
}
pub type DESC_IF_T = usb_interface_descriptor;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct usb_endpoint_descriptor {
    #[doc = "< Length of endpoint descriptor"]
    pub bLength: u8,
    #[doc = "< Descriptor type"]
    pub bDescriptorType: u8,
    #[doc = "< Endpoint address"]
    pub bEndpointAddress: u8,
    #[doc = "< Endpoint attribute"]
    pub bmAttributes: u8,
    #[doc = "< Maximum packet size"]
    pub wMaxPacketSize: u16,
    #[doc = "< Synchronous transfer interval"]
    pub bInterval: u8,
    #[doc = "< Refresh"]
    pub bRefresh: u8,
    #[doc = "< Sync address"]
    pub bSynchAddress: u8,
}
pub type DESC_EP_T = usb_endpoint_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HC_DRV_T {
    pub init: ::core::option::Option<unsafe extern "C" fn() -> libc::c_int>,
    pub shutdown: ::core::option::Option<unsafe extern "C" fn()>,
    pub suspend: ::core::option::Option<unsafe extern "C" fn()>,
    pub resume: ::core::option::Option<unsafe extern "C" fn()>,
    pub ctrl_xfer: ::core::option::Option<unsafe extern "C" fn(utr: *mut utr_t) -> libc::c_int>,
    pub bulk_xfer: ::core::option::Option<unsafe extern "C" fn(utr: *mut utr_t) -> libc::c_int>,
    pub int_xfer: ::core::option::Option<unsafe extern "C" fn(utr: *mut utr_t) -> libc::c_int>,
    pub iso_xfer: ::core::option::Option<unsafe extern "C" fn(utr: *mut utr_t) -> libc::c_int>,
    pub quit_xfer: ::core::option::Option<
        unsafe extern "C" fn(utr: *mut utr_t, ep: *mut ep_info_t) -> libc::c_int,
    >,
    pub rthub_port_reset:
        ::core::option::Option<unsafe extern "C" fn(port: libc::c_int) -> libc::c_int>,
    pub rthub_polling: ::core::option::Option<unsafe extern "C" fn() -> libc::c_int>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UDEV_DRV_T {
    pub probe: ::core::option::Option<unsafe extern "C" fn(iface: *mut iface_t) -> libc::c_int>,
    pub disconnect: ::core::option::Option<unsafe extern "C" fn(iface: *mut iface_t)>,
    pub suspend: ::core::option::Option<unsafe extern "C" fn(iface: *mut iface_t)>,
    pub resume: ::core::option::Option<unsafe extern "C" fn(iface: *mut iface_t)>,
}
pub const SPEED_E_SPEED_LOW: SPEED_E = 0;
pub const SPEED_E_SPEED_FULL: SPEED_E = 1;
pub const SPEED_E_SPEED_HIGH: SPEED_E = 2;
pub type SPEED_E = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ep_info_t {
    pub bEndpointAddress: u8,
    pub bmAttributes: u8,
    pub bInterval: u8,
    pub bToggle: u8,
    pub wMaxPacketSize: u16,
    #[doc = "< point to the HC assocaied endpoint    \\hideinitializer"]
    pub hw_pipe: *mut libc::c_void,
}
pub type EP_INFO_T = ep_info_t;
#[doc = " @addtogroup N9H30_USBH_EXPORTED_STRUCT Data structure\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_t {
    #[doc = "< Device descriptor.                    \\hideinitializer"]
    pub descriptor: DESC_DEV_T,
    #[doc = "< parent hub device                     \\hideinitializer"]
    pub parent: *mut hub_dev_t,
    #[doc = "< The hub port this device connected on \\hideinitializer"]
    pub port_num: u8,
    #[doc = "< device number                         \\hideinitializer"]
    pub dev_num: u8,
    #[doc = "< Currentll selected configuration      \\hideinitializer"]
    pub cur_conf: i8,
    #[doc = "< device speed (low/full/high)          \\hideinitializer"]
    pub speed: SPEED_E,
    #[doc = "< Configuration descriptor buffer.      \\hideinitializer"]
    pub cfd_buff: *mut u8,
    #[doc = "< Endpoint 0                            \\hideinitializer"]
    pub ep0: EP_INFO_T,
    #[doc = "< host controller driver                \\hideinitializer"]
    pub hc_driver: *mut HC_DRV_T,
    #[doc = "< Working interface list                \\hideinitializer"]
    pub iface_list: *mut iface_t,
    #[doc = "< link for global usb device list       \\hideinitializer"]
    pub next: *mut udev_t,
}
#[doc = " @addtogroup N9H30_USBH_EXPORTED_STRUCT Data structure\n@{"]
pub type UDEV_T = udev_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alt_iface_t {
    #[doc = "< point to the location of this alternative interface descriptor in UDEV_T->cfd_buff"]
    pub ifd: *mut DESC_IF_T,
    #[doc = "< endpoints of this alternative interface"]
    pub ep: [EP_INFO_T; 8usize],
}
pub type ALT_IFACE_T = alt_iface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iface_t {
    #[doc = "< USB device                            \\hideinitializer"]
    pub udev: *mut UDEV_T,
    #[doc = "< Interface number                      \\hideinitializer"]
    pub if_num: u8,
    #[doc = "< Number of alternative interface       \\hideinitializer"]
    pub num_alt: u8,
    #[doc = "< Point to the active alternative interface"]
    pub aif: *mut ALT_IFACE_T,
    #[doc = "< List of alternative interface      \\hideinitializer"]
    pub alt: [ALT_IFACE_T; 12usize],
    #[doc = "< Interface associated driver           \\hideinitializer"]
    pub driver: *mut UDEV_DRV_T,
    #[doc = "< Reference to device context           \\hideinitializer"]
    pub context: *mut libc::c_void,
    #[doc = "< Point to next interface of the same device. Started from UDEV_T->iface_list   \\hideinitializer"]
    pub next: *mut iface_t,
}
pub type IFACE_T = iface_t;
pub type FUNC_UTR_T = ::core::option::Option<unsafe extern "C" fn(arg1: *mut utr_t)>;
#[doc = " @cond HIDDEN_SYMBOLS"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utr_t {
    #[doc = "< point to associated USB device        \\hideinitializer"]
    pub udev: *mut UDEV_T,
    #[doc = "< buffer for setup packet               \\hideinitializer"]
    pub setup: DEV_REQ_T,
    #[doc = "< associated endpoint                   \\hideinitializer"]
    pub ep: *mut EP_INFO_T,
    #[doc = "< transfer buffer                       \\hideinitializer"]
    pub buff: *mut u8,
    #[doc = "< tansfer done?                         \\hideinitializer"]
    pub bIsTransferDone: u8,
    #[doc = "< length of data to be transferred      \\hideinitializer"]
    pub data_len: u32,
    #[doc = "< length of transferred data            \\hideinitializer"]
    pub xfer_len: u32,
    #[doc = "< New schedule isochronous transfer     \\hideinitializer"]
    pub bIsoNewSched: u8,
    #[doc = "< Isochronous start frame number        \\hideinitializer"]
    pub iso_sf: u16,
    #[doc = "< transfer length of isochronous frames \\hideinitializer"]
    pub iso_xlen: [u16; 8usize],
    #[doc = "< transfer buffer address of isochronous frames \\hideinitializer"]
    pub iso_buff: [*mut u8; 8usize],
    #[doc = "< transfer status of isochronous frames \\hideinitializer"]
    pub iso_status: [libc::c_int; 8usize],
    #[doc = "< number of transfer descriptors        \\hideinitializer"]
    pub td_cnt: libc::c_int,
    #[doc = "< return status                         \\hideinitializer"]
    pub status: libc::c_int,
    #[doc = "< interrupt/isochronous interval        \\hideinitializer"]
    pub interval: libc::c_int,
    #[doc = "< point to deivce proprietary data area \\hideinitializer"]
    pub context: *mut libc::c_void,
    #[doc = "< tansfer done call-back function       \\hideinitializer"]
    pub func: FUNC_UTR_T,
    pub next: *mut utr_t,
}
#[doc = " @cond HIDDEN_SYMBOLS"]
pub type UTR_T = utr_t;
extern "C" {
    pub static mut _ohci: *mut USBH_T;
}
extern "C" {
    pub static mut _ehci: *mut HSUSBH_T;
}
extern "C" {
    pub static mut ohci_driver: HC_DRV_T;
}
extern "C" {
    pub static mut ehci_driver: HC_DRV_T;
}
extern "C" {
    pub static mut g_udev_list: *mut UDEV_T;
}
extern "C" {
    pub static mut _IsInUsbInterrupt: libc::c_int;
}
extern "C" {
    pub fn delay_us(usec: libc::c_int);
}
extern "C" {
    pub fn sysprintf(format: *const libc::c_char, ...);
}
extern "C" {
    pub fn dma_to_virt(physical_address: *mut libc::c_void) -> *mut libc::c_void;
}
extern "C" {
    pub fn virt_to_dma(virtual_address: *mut libc::c_void) -> *mut libc::c_void;
}
extern "C" {
    pub fn dump_ohci_int_table();
}
extern "C" {
    pub fn dump_ehci_qtd(qtd: *mut qTD_T);
}
extern "C" {
    pub fn dump_ehci_asynclist();
}
extern "C" {
    pub fn dump_ehci_period_frame_list_simple();
}
extern "C" {
    pub fn usbh_dump_buff_bytes(buff: *mut u8, nSize: libc::c_int);
}
extern "C" {
    pub fn usbh_dump_interface_descriptor(if_desc: *mut DESC_IF_T);
}
extern "C" {
    pub fn usbh_dump_endpoint_descriptor(ep_desc: *mut DESC_EP_T);
}
extern "C" {
    pub fn usbh_dump_iface(iface: *mut IFACE_T);
}
extern "C" {
    pub fn usbh_dump_ep_info(ep: *mut EP_INFO_T);
}
extern "C" {
    pub fn USB_InitializeMemoryPool();
}
extern "C" {
    pub fn USB_UninitializeMemoryPool();
}
extern "C" {
    pub fn USB_malloc(wanted_size: libc::c_int, boundary: libc::c_int) -> *mut libc::c_void;
}
extern "C" {
    pub fn USB_free(arg1: *mut libc::c_void);
}
extern "C" {
    pub fn USB_available_memory() -> libc::c_int;
}
extern "C" {
    pub fn USB_allocated_memory() -> libc::c_int;
}
extern "C" {
    pub fn usbh_memory_init();
}
extern "C" {
    pub fn usbh_memory_deinit();
}
extern "C" {
    pub fn usbh_alloc_mem(size: libc::c_int) -> *mut libc::c_void;
}
extern "C" {
    pub fn usbh_free_mem(p: *mut libc::c_void, size: libc::c_int);
}
extern "C" {
    pub fn alloc_dev_address() -> libc::c_int;
}
extern "C" {
    pub fn free_dev_address(dev_addr: libc::c_int);
}
extern "C" {
    pub fn alloc_device() -> *mut UDEV_T;
}
extern "C" {
    pub fn free_device(udev: *mut UDEV_T);
}
extern "C" {
    pub fn alloc_utr(udev: *mut UDEV_T) -> *mut UTR_T;
}
extern "C" {
    pub fn free_utr(utr: *mut UTR_T);
}
extern "C" {
    pub fn alloc_ohci_ED() -> *mut ED_T;
}
extern "C" {
    pub fn free_ohci_ED(ed: *mut ED_T);
}
extern "C" {
    pub fn alloc_ohci_TD(utr: *mut UTR_T) -> *mut TD_T;
}
extern "C" {
    pub fn free_ohci_TD(td: *mut TD_T);
}
extern "C" {
    pub fn alloc_ehci_QH() -> *mut QH_T;
}
extern "C" {
    pub fn free_ehci_QH(qh: *mut QH_T);
}
extern "C" {
    pub fn alloc_ehci_qTD(utr: *mut UTR_T) -> *mut qTD_T;
}
extern "C" {
    pub fn free_ehci_qTD(qtd: *mut qTD_T);
}
extern "C" {
    pub fn alloc_ehci_iTD() -> *mut iTD_T;
}
extern "C" {
    pub fn free_ehci_iTD(itd: *mut iTD_T);
}
extern "C" {
    pub fn alloc_ehci_siTD() -> *mut siTD_T;
}
extern "C" {
    pub fn free_ehci_siTD(sitd: *mut siTD_T);
}
extern "C" {
    pub fn usbh_hub_init();
}
extern "C" {
    pub fn connect_device(arg1: *mut UDEV_T) -> libc::c_int;
}
extern "C" {
    pub fn disconnect_device(arg1: *mut UDEV_T);
}
extern "C" {
    pub fn usbh_register_driver(driver: *mut UDEV_DRV_T) -> libc::c_int;
}
extern "C" {
    pub fn usbh_iface_find_ep(iface: *mut IFACE_T, ep_addr: u8, dir_type: u8) -> *mut EP_INFO_T;
}
extern "C" {
    pub fn usbh_reset_device(arg1: *mut UDEV_T) -> libc::c_int;
}
extern "C" {
    pub fn usbh_get_device_descriptor(udev: *mut UDEV_T, desc_buff: *mut DESC_DEV_T)
        -> libc::c_int;
}
extern "C" {
    pub fn usbh_get_config_descriptor(
        udev: *mut UDEV_T,
        desc_buff: *mut u8,
        buff_len: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn usbh_set_configuration(udev: *mut UDEV_T, conf_val: u8) -> libc::c_int;
}
extern "C" {
    pub fn usbh_set_interface(iface: *mut IFACE_T, alt_setting: u16) -> libc::c_int;
}
extern "C" {
    pub fn usbh_clear_halt(udev: *mut UDEV_T, ep_addr: u16) -> libc::c_int;
}
extern "C" {
    pub fn usbh_ctrl_xfer(
        udev: *mut UDEV_T,
        bmRequestType: u8,
        bRequest: u8,
        wValue: u16,
        wIndex: u16,
        wLength: u16,
        buff: *mut u8,
        xfer_len: *mut u32,
        timeout: u32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn usbh_bulk_xfer(utr: *mut UTR_T) -> libc::c_int;
}
extern "C" {
    pub fn usbh_int_xfer(utr: *mut UTR_T) -> libc::c_int;
}
extern "C" {
    pub fn usbh_iso_xfer(utr: *mut UTR_T) -> libc::c_int;
}
extern "C" {
    pub fn usbh_quit_utr(utr: *mut UTR_T) -> libc::c_int;
}
extern "C" {
    pub fn usbh_quit_xfer(udev: *mut UDEV_T, ep: *mut EP_INFO_T) -> libc::c_int;
}
pub type XID_CONN_FUNC =
    ::core::option::Option<unsafe extern "C" fn(hdev: *mut xid_dev, param: libc::c_int)>;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct xid_descriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bcdXid: u16,
    pub bType: u8,
    pub bSubType: u8,
    pub bMaxInputReportSize: u8,
    pub bMaxOutputReportSize: u8,
    pub wAlternateProductIds: [u16; 4usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct xid_gamepad_in {
    pub startByte: u8,
    pub bLength: u8,
    pub dButtons: u16,
    pub a: u8,
    pub b: u8,
    pub x: u8,
    pub y: u8,
    pub black: u8,
    pub white: u8,
    pub l: u8,
    pub r: u8,
    pub leftStickX: i16,
    pub leftStickY: i16,
    pub rightStickX: i16,
    pub rightStickY: i16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct xid_gamepad_out {
    pub startByte: u8,
    pub bLength: u8,
    pub lValue: u16,
    pub hValue: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct xid_xremote_in {
    pub startByte: u8,
    pub bLength: u8,
    pub buttonCode: u16,
    pub timeElapsed: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xid_dev {
    pub idVendor: u16,
    pub idProduct: u16,
    pub xid_desc: xid_descriptor,
    pub utr_list: [*mut UTR_T; 4usize],
    pub iface: *mut IFACE_T,
    pub uid: u32,
    pub next: *mut xid_dev,
    pub user_data: *mut libc::c_void,
}
pub type xid_dev_t = xid_dev;
pub const _xid_type_XID_UNKNOWN: _xid_type = 0;
pub const _xid_type_GAMECONTROLLER_S: _xid_type = 257;
pub const _xid_type_GAMECONTROLLER_DUKE: _xid_type = 258;
pub const _xid_type_GAMECONTROLLER_WHEEL: _xid_type = 272;
pub const _xid_type_GAMECONTROLLER_ARCADESTICK: _xid_type = 288;
pub const _xid_type_XREMOTE: _xid_type = 768;
pub const _xid_type_STEEL_BATTALION: _xid_type = 32769;
pub type _xid_type = libc::c_int;
pub use self::_xid_type as xid_type;
extern "C" {
    pub fn usbh_xid_init();
}
extern "C" {
    pub fn usbh_install_xid_conn_callback(conn_func: XID_CONN_FUNC, disconn_func: XID_CONN_FUNC);
}
extern "C" {
    pub fn usbh_xid_get_device_list() -> *mut xid_dev_t;
}
extern "C" {
    pub fn usbh_xid_read(
        xid_dev: *mut xid_dev_t,
        ep_addr: u8,
        rx_complete_callback: *mut libc::c_void,
    ) -> i32;
}
extern "C" {
    pub fn usbh_xid_write(
        xid_dev: *mut xid_dev_t,
        ep_addr: u8,
        txbuff: *mut u8,
        len: u32,
        tx_complete_callback: *mut libc::c_void,
    ) -> i32;
}
extern "C" {
    pub fn usbh_xid_get_type(xid_dev: *mut xid_dev_t) -> xid_type;
}
extern "C" {
    pub fn usbh_xid_rumble(xid_dev: *mut xid_dev_t, l_value: u16, h_value: u16) -> i32;
}
pub type __builtin_va_list = *mut libc::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub _address: u8,
}
